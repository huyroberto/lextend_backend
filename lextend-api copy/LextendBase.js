//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var auth_ttypes = require('./auth_types');
var learning_ttypes = require('./learning_types');
var common_ttypes = require('./common_types');
var annot_ttypes = require('./annot_types');
var media_ttypes = require('./media_types');


var ttypes = require('./backend_types');
//HELPER FUNCTIONS AND STRUCTURES

var LextendBase_startLearningNewLanguage_args = function(args) {
  this.authToken = null;
  this.langid = null;
  this.vialangid = null;
  this.startLevel = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.langid !== undefined && args.langid !== null) {
      this.langid = args.langid;
    }
    if (args.vialangid !== undefined && args.vialangid !== null) {
      this.vialangid = args.vialangid;
    }
    if (args.startLevel !== undefined && args.startLevel !== null) {
      this.startLevel = args.startLevel;
    }
  }
};
LextendBase_startLearningNewLanguage_args.prototype = {};
LextendBase_startLearningNewLanguage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.langid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.vialangid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.startLevel = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_startLearningNewLanguage_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_startLearningNewLanguage_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.langid !== null && this.langid !== undefined) {
    output.writeFieldBegin('langid', Thrift.Type.STRING, 2);
    output.writeString(this.langid);
    output.writeFieldEnd();
  }
  if (this.vialangid !== null && this.vialangid !== undefined) {
    output.writeFieldBegin('vialangid', Thrift.Type.STRING, 3);
    output.writeString(this.vialangid);
    output.writeFieldEnd();
  }
  if (this.startLevel !== null && this.startLevel !== undefined) {
    output.writeFieldBegin('startLevel', Thrift.Type.I32, 4);
    output.writeI32(this.startLevel);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_startLearningNewLanguage_result = function(args) {
  this.success = null;
  this.ioerr = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [learning_ttypes.LearningSetting]);
    }
    if (args.ioerr !== undefined && args.ioerr !== null) {
      this.ioerr = args.ioerr;
    }
  }
};
LextendBase_startLearningNewLanguage_result.prototype = {};
LextendBase_startLearningNewLanguage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size152 = 0;
        var _rtmp3156;
        this.success = [];
        var _etype155 = 0;
        _rtmp3156 = input.readListBegin();
        _etype155 = _rtmp3156.etype;
        _size152 = _rtmp3156.size;
        for (var _i157 = 0; _i157 < _size152; ++_i157)
        {
          var elem158 = null;
          elem158 = new learning_ttypes.LearningSetting();
          elem158.read(input);
          this.success.push(elem158);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerr = new ttypes.LextendIOError();
        this.ioerr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_startLearningNewLanguage_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_startLearningNewLanguage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter159 in this.success)
    {
      if (this.success.hasOwnProperty(iter159))
      {
        iter159 = this.success[iter159];
        iter159.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ioerr !== null && this.ioerr !== undefined) {
    output.writeFieldBegin('ioerr', Thrift.Type.STRUCT, 1);
    this.ioerr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_updateLearningSetting_args = function(args) {
  this.authToken = null;
  this.langid = null;
  this.numWordPerDay = null;
  this.numNewWordPerDay = null;
  this.level = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.langid !== undefined && args.langid !== null) {
      this.langid = args.langid;
    }
    if (args.numWordPerDay !== undefined && args.numWordPerDay !== null) {
      this.numWordPerDay = args.numWordPerDay;
    }
    if (args.numNewWordPerDay !== undefined && args.numNewWordPerDay !== null) {
      this.numNewWordPerDay = args.numNewWordPerDay;
    }
    if (args.level !== undefined && args.level !== null) {
      this.level = args.level;
    }
  }
};
LextendBase_updateLearningSetting_args.prototype = {};
LextendBase_updateLearningSetting_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.langid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numWordPerDay = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.numNewWordPerDay = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_updateLearningSetting_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_updateLearningSetting_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.langid !== null && this.langid !== undefined) {
    output.writeFieldBegin('langid', Thrift.Type.STRING, 2);
    output.writeString(this.langid);
    output.writeFieldEnd();
  }
  if (this.numWordPerDay !== null && this.numWordPerDay !== undefined) {
    output.writeFieldBegin('numWordPerDay', Thrift.Type.I32, 3);
    output.writeI32(this.numWordPerDay);
    output.writeFieldEnd();
  }
  if (this.numNewWordPerDay !== null && this.numNewWordPerDay !== undefined) {
    output.writeFieldBegin('numNewWordPerDay', Thrift.Type.I32, 4);
    output.writeI32(this.numNewWordPerDay);
    output.writeFieldEnd();
  }
  if (this.level !== null && this.level !== undefined) {
    output.writeFieldBegin('level', Thrift.Type.I32, 5);
    output.writeI32(this.level);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_updateLearningSetting_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.LextendIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
LextendBase_updateLearningSetting_result.prototype = {};
LextendBase_updateLearningSetting_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.LextendIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_updateLearningSetting_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_updateLearningSetting_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getLearningSettings_args = function(args) {
  this.authToken = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
  }
};
LextendBase_getLearningSettings_args.prototype = {};
LextendBase_getLearningSettings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getLearningSettings_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getLearningSettings_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getLearningSettings_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.LextendIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [learning_ttypes.LearningSetting]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
LextendBase_getLearningSettings_result.prototype = {};
LextendBase_getLearningSettings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size160 = 0;
        var _rtmp3164;
        this.success = [];
        var _etype163 = 0;
        _rtmp3164 = input.readListBegin();
        _etype163 = _rtmp3164.etype;
        _size160 = _rtmp3164.size;
        for (var _i165 = 0; _i165 < _size160; ++_i165)
        {
          var elem166 = null;
          elem166 = new learning_ttypes.LearningSetting();
          elem166.read(input);
          this.success.push(elem166);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.LextendIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getLearningSettings_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getLearningSettings_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter167 in this.success)
    {
      if (this.success.hasOwnProperty(iter167))
      {
        iter167 = this.success[iter167];
        iter167.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_lookup_args = function(args) {
  this.authToken = null;
  this.fromlangid = null;
  this.tolangid = null;
  this.word = null;
  this.searchExample = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.fromlangid !== undefined && args.fromlangid !== null) {
      this.fromlangid = args.fromlangid;
    }
    if (args.tolangid !== undefined && args.tolangid !== null) {
      this.tolangid = args.tolangid;
    }
    if (args.word !== undefined && args.word !== null) {
      this.word = args.word;
    }
    if (args.searchExample !== undefined && args.searchExample !== null) {
      this.searchExample = args.searchExample;
    }
  }
};
LextendBase_lookup_args.prototype = {};
LextendBase_lookup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fromlangid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tolangid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.word = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.searchExample = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_lookup_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_lookup_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.fromlangid !== null && this.fromlangid !== undefined) {
    output.writeFieldBegin('fromlangid', Thrift.Type.STRING, 2);
    output.writeString(this.fromlangid);
    output.writeFieldEnd();
  }
  if (this.tolangid !== null && this.tolangid !== undefined) {
    output.writeFieldBegin('tolangid', Thrift.Type.STRING, 3);
    output.writeString(this.tolangid);
    output.writeFieldEnd();
  }
  if (this.word !== null && this.word !== undefined) {
    output.writeFieldBegin('word', Thrift.Type.STRING, 4);
    output.writeString(this.word);
    output.writeFieldEnd();
  }
  if (this.searchExample !== null && this.searchExample !== undefined) {
    output.writeFieldBegin('searchExample', Thrift.Type.BOOL, 5);
    output.writeBool(this.searchExample);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_lookup_result = function(args) {
  this.success = null;
  this.ioerr = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.WordWrapper(args.success);
    }
    if (args.ioerr !== undefined && args.ioerr !== null) {
      this.ioerr = args.ioerr;
    }
  }
};
LextendBase_lookup_result.prototype = {};
LextendBase_lookup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.WordWrapper();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerr = new ttypes.LextendIOError();
        this.ioerr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_lookup_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_lookup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ioerr !== null && this.ioerr !== undefined) {
    output.writeFieldBegin('ioerr', Thrift.Type.STRUCT, 1);
    this.ioerr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_downloadDictionary_args = function(args) {
  this.authToken = null;
  this.fromlangid = null;
  this.tolangid = null;
  this.fromEntryNum = null;
  this.toEntryNum = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.fromlangid !== undefined && args.fromlangid !== null) {
      this.fromlangid = args.fromlangid;
    }
    if (args.tolangid !== undefined && args.tolangid !== null) {
      this.tolangid = args.tolangid;
    }
    if (args.fromEntryNum !== undefined && args.fromEntryNum !== null) {
      this.fromEntryNum = args.fromEntryNum;
    }
    if (args.toEntryNum !== undefined && args.toEntryNum !== null) {
      this.toEntryNum = args.toEntryNum;
    }
  }
};
LextendBase_downloadDictionary_args.prototype = {};
LextendBase_downloadDictionary_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fromlangid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tolangid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.fromEntryNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.toEntryNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_downloadDictionary_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_downloadDictionary_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.fromlangid !== null && this.fromlangid !== undefined) {
    output.writeFieldBegin('fromlangid', Thrift.Type.STRING, 2);
    output.writeString(this.fromlangid);
    output.writeFieldEnd();
  }
  if (this.tolangid !== null && this.tolangid !== undefined) {
    output.writeFieldBegin('tolangid', Thrift.Type.STRING, 3);
    output.writeString(this.tolangid);
    output.writeFieldEnd();
  }
  if (this.fromEntryNum !== null && this.fromEntryNum !== undefined) {
    output.writeFieldBegin('fromEntryNum', Thrift.Type.I32, 4);
    output.writeI32(this.fromEntryNum);
    output.writeFieldEnd();
  }
  if (this.toEntryNum !== null && this.toEntryNum !== undefined) {
    output.writeFieldBegin('toEntryNum', Thrift.Type.I32, 5);
    output.writeI32(this.toEntryNum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_downloadDictionary_result = function(args) {
  this.success = null;
  this.ioerr = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.WordWrapper]);
    }
    if (args.ioerr !== undefined && args.ioerr !== null) {
      this.ioerr = args.ioerr;
    }
  }
};
LextendBase_downloadDictionary_result.prototype = {};
LextendBase_downloadDictionary_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size168 = 0;
        var _rtmp3172;
        this.success = [];
        var _etype171 = 0;
        _rtmp3172 = input.readListBegin();
        _etype171 = _rtmp3172.etype;
        _size168 = _rtmp3172.size;
        for (var _i173 = 0; _i173 < _size168; ++_i173)
        {
          var elem174 = null;
          elem174 = new ttypes.WordWrapper();
          elem174.read(input);
          this.success.push(elem174);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerr = new ttypes.LextendIOError();
        this.ioerr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_downloadDictionary_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_downloadDictionary_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter175 in this.success)
    {
      if (this.success.hasOwnProperty(iter175))
      {
        iter175 = this.success[iter175];
        iter175.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ioerr !== null && this.ioerr !== undefined) {
    output.writeFieldBegin('ioerr', Thrift.Type.STRUCT, 1);
    this.ioerr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getLookupSuggestions_args = function(args) {
  this.authToken = null;
  this.fromlangid = null;
  this.tolangid = null;
  this.charSeq = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.fromlangid !== undefined && args.fromlangid !== null) {
      this.fromlangid = args.fromlangid;
    }
    if (args.tolangid !== undefined && args.tolangid !== null) {
      this.tolangid = args.tolangid;
    }
    if (args.charSeq !== undefined && args.charSeq !== null) {
      this.charSeq = args.charSeq;
    }
  }
};
LextendBase_getLookupSuggestions_args.prototype = {};
LextendBase_getLookupSuggestions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fromlangid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tolangid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.charSeq = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getLookupSuggestions_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getLookupSuggestions_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.fromlangid !== null && this.fromlangid !== undefined) {
    output.writeFieldBegin('fromlangid', Thrift.Type.STRING, 2);
    output.writeString(this.fromlangid);
    output.writeFieldEnd();
  }
  if (this.tolangid !== null && this.tolangid !== undefined) {
    output.writeFieldBegin('tolangid', Thrift.Type.STRING, 3);
    output.writeString(this.tolangid);
    output.writeFieldEnd();
  }
  if (this.charSeq !== null && this.charSeq !== undefined) {
    output.writeFieldBegin('charSeq', Thrift.Type.STRING, 4);
    output.writeString(this.charSeq);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getLookupSuggestions_result = function(args) {
  this.success = null;
  this.ioerr = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ioerr !== undefined && args.ioerr !== null) {
      this.ioerr = args.ioerr;
    }
  }
};
LextendBase_getLookupSuggestions_result.prototype = {};
LextendBase_getLookupSuggestions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size176 = 0;
        var _rtmp3180;
        this.success = [];
        var _etype179 = 0;
        _rtmp3180 = input.readListBegin();
        _etype179 = _rtmp3180.etype;
        _size176 = _rtmp3180.size;
        for (var _i181 = 0; _i181 < _size176; ++_i181)
        {
          var elem182 = null;
          elem182 = input.readString();
          this.success.push(elem182);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerr = new ttypes.LextendIOError();
        this.ioerr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getLookupSuggestions_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getLookupSuggestions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter183 in this.success)
    {
      if (this.success.hasOwnProperty(iter183))
      {
        iter183 = this.success[iter183];
        output.writeString(iter183);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ioerr !== null && this.ioerr !== undefined) {
    output.writeFieldBegin('ioerr', Thrift.Type.STRUCT, 1);
    this.ioerr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_searchExamples_args = function(args) {
  this.authToken = null;
  this.fromlangid = null;
  this.tolangid = null;
  this.word = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.fromlangid !== undefined && args.fromlangid !== null) {
      this.fromlangid = args.fromlangid;
    }
    if (args.tolangid !== undefined && args.tolangid !== null) {
      this.tolangid = args.tolangid;
    }
    if (args.word !== undefined && args.word !== null) {
      this.word = args.word;
    }
  }
};
LextendBase_searchExamples_args.prototype = {};
LextendBase_searchExamples_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fromlangid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tolangid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.word = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_searchExamples_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_searchExamples_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.fromlangid !== null && this.fromlangid !== undefined) {
    output.writeFieldBegin('fromlangid', Thrift.Type.STRING, 2);
    output.writeString(this.fromlangid);
    output.writeFieldEnd();
  }
  if (this.tolangid !== null && this.tolangid !== undefined) {
    output.writeFieldBegin('tolangid', Thrift.Type.STRING, 3);
    output.writeString(this.tolangid);
    output.writeFieldEnd();
  }
  if (this.word !== null && this.word !== undefined) {
    output.writeFieldBegin('word', Thrift.Type.STRING, 4);
    output.writeString(this.word);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_searchExamples_result = function(args) {
  this.success = null;
  this.ioerr = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [learning_ttypes.BilingualSentence]);
    }
    if (args.ioerr !== undefined && args.ioerr !== null) {
      this.ioerr = args.ioerr;
    }
  }
};
LextendBase_searchExamples_result.prototype = {};
LextendBase_searchExamples_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size184 = 0;
        var _rtmp3188;
        this.success = [];
        var _etype187 = 0;
        _rtmp3188 = input.readListBegin();
        _etype187 = _rtmp3188.etype;
        _size184 = _rtmp3188.size;
        for (var _i189 = 0; _i189 < _size184; ++_i189)
        {
          var elem190 = null;
          elem190 = new learning_ttypes.BilingualSentence();
          elem190.read(input);
          this.success.push(elem190);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerr = new ttypes.LextendIOError();
        this.ioerr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_searchExamples_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_searchExamples_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter191 in this.success)
    {
      if (this.success.hasOwnProperty(iter191))
      {
        iter191 = this.success[iter191];
        iter191.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ioerr !== null && this.ioerr !== undefined) {
    output.writeFieldBegin('ioerr', Thrift.Type.STRUCT, 1);
    this.ioerr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getTodayWords_args = function(args) {
  this.authToken = null;
  this.langid = null;
  this.vialangid = null;
  this.timezone = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.langid !== undefined && args.langid !== null) {
      this.langid = args.langid;
    }
    if (args.vialangid !== undefined && args.vialangid !== null) {
      this.vialangid = args.vialangid;
    }
    if (args.timezone !== undefined && args.timezone !== null) {
      this.timezone = args.timezone;
    }
  }
};
LextendBase_getTodayWords_args.prototype = {};
LextendBase_getTodayWords_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.langid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.vialangid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.timezone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getTodayWords_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getTodayWords_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.langid !== null && this.langid !== undefined) {
    output.writeFieldBegin('langid', Thrift.Type.STRING, 2);
    output.writeString(this.langid);
    output.writeFieldEnd();
  }
  if (this.vialangid !== null && this.vialangid !== undefined) {
    output.writeFieldBegin('vialangid', Thrift.Type.STRING, 3);
    output.writeString(this.vialangid);
    output.writeFieldEnd();
  }
  if (this.timezone !== null && this.timezone !== undefined) {
    output.writeFieldBegin('timezone', Thrift.Type.STRING, 4);
    output.writeString(this.timezone);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getTodayWords_result = function(args) {
  this.success = null;
  this.ioerr = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.WordWrapper]);
    }
    if (args.ioerr !== undefined && args.ioerr !== null) {
      this.ioerr = args.ioerr;
    }
  }
};
LextendBase_getTodayWords_result.prototype = {};
LextendBase_getTodayWords_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size192 = 0;
        var _rtmp3196;
        this.success = [];
        var _etype195 = 0;
        _rtmp3196 = input.readListBegin();
        _etype195 = _rtmp3196.etype;
        _size192 = _rtmp3196.size;
        for (var _i197 = 0; _i197 < _size192; ++_i197)
        {
          var elem198 = null;
          elem198 = new ttypes.WordWrapper();
          elem198.read(input);
          this.success.push(elem198);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerr = new ttypes.LextendIOError();
        this.ioerr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getTodayWords_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getTodayWords_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter199 in this.success)
    {
      if (this.success.hasOwnProperty(iter199))
      {
        iter199 = this.success[iter199];
        iter199.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ioerr !== null && this.ioerr !== undefined) {
    output.writeFieldBegin('ioerr', Thrift.Type.STRUCT, 1);
    this.ioerr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_updateUserWord_args = function(args) {
  this.authToken = null;
  this.word = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.word !== undefined && args.word !== null) {
      this.word = new learning_ttypes.UserWord(args.word);
    }
  }
};
LextendBase_updateUserWord_args.prototype = {};
LextendBase_updateUserWord_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.word = new learning_ttypes.UserWord();
        this.word.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_updateUserWord_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_updateUserWord_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.word !== null && this.word !== undefined) {
    output.writeFieldBegin('word', Thrift.Type.STRUCT, 2);
    this.word.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_updateUserWord_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.LextendIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new learning_ttypes.ObjectUpdateInfo(args.success);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
LextendBase_updateUserWord_result.prototype = {};
LextendBase_updateUserWord_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new learning_ttypes.ObjectUpdateInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.LextendIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_updateUserWord_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_updateUserWord_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_deleteUserWord_args = function(args) {
  this.authToken = null;
  this.uri = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    }
  }
};
LextendBase_deleteUserWord_args.prototype = {};
LextendBase_deleteUserWord_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_deleteUserWord_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_deleteUserWord_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 2);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_deleteUserWord_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.LextendIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new learning_ttypes.ObjectUpdateInfo(args.success);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
LextendBase_deleteUserWord_result.prototype = {};
LextendBase_deleteUserWord_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new learning_ttypes.ObjectUpdateInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.LextendIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_deleteUserWord_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_deleteUserWord_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_createUserWord_args = function(args) {
  this.authToken = null;
  this.word = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.word !== undefined && args.word !== null) {
      this.word = new learning_ttypes.UserWord(args.word);
    }
  }
};
LextendBase_createUserWord_args.prototype = {};
LextendBase_createUserWord_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.word = new learning_ttypes.UserWord();
        this.word.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_createUserWord_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_createUserWord_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.word !== null && this.word !== undefined) {
    output.writeFieldBegin('word', Thrift.Type.STRUCT, 2);
    this.word.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_createUserWord_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.LextendIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new learning_ttypes.ObjectUpdateInfo(args.success);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
LextendBase_createUserWord_result.prototype = {};
LextendBase_createUserWord_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new learning_ttypes.ObjectUpdateInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.LextendIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_createUserWord_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_createUserWord_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getUserWords_args = function(args) {
  this.authToken = null;
  this.langid = null;
  this.words = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.langid !== undefined && args.langid !== null) {
      this.langid = args.langid;
    }
    if (args.words !== undefined && args.words !== null) {
      this.words = Thrift.copyList(args.words, [null]);
    }
  }
};
LextendBase_getUserWords_args.prototype = {};
LextendBase_getUserWords_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.langid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size200 = 0;
        var _rtmp3204;
        this.words = [];
        var _etype203 = 0;
        _rtmp3204 = input.readListBegin();
        _etype203 = _rtmp3204.etype;
        _size200 = _rtmp3204.size;
        for (var _i205 = 0; _i205 < _size200; ++_i205)
        {
          var elem206 = null;
          elem206 = input.readString();
          this.words.push(elem206);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getUserWords_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getUserWords_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.langid !== null && this.langid !== undefined) {
    output.writeFieldBegin('langid', Thrift.Type.STRING, 2);
    output.writeString(this.langid);
    output.writeFieldEnd();
  }
  if (this.words !== null && this.words !== undefined) {
    output.writeFieldBegin('words', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.words.length);
    for (var iter207 in this.words)
    {
      if (this.words.hasOwnProperty(iter207))
      {
        iter207 = this.words[iter207];
        output.writeString(iter207);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getUserWords_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.LextendIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [learning_ttypes.UserWord]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
LextendBase_getUserWords_result.prototype = {};
LextendBase_getUserWords_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size208 = 0;
        var _rtmp3212;
        this.success = {};
        var _ktype209 = 0;
        var _vtype210 = 0;
        _rtmp3212 = input.readMapBegin();
        _ktype209 = _rtmp3212.ktype;
        _vtype210 = _rtmp3212.vtype;
        _size208 = _rtmp3212.size;
        for (var _i213 = 0; _i213 < _size208; ++_i213)
        {
          var key214 = null;
          var val215 = null;
          key214 = input.readString();
          val215 = new learning_ttypes.UserWord();
          val215.read(input);
          this.success[key214] = val215;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.LextendIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getUserWords_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getUserWords_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter216 in this.success)
    {
      if (this.success.hasOwnProperty(kiter216))
      {
        var viter217 = this.success[kiter216];
        output.writeString(kiter216);
        viter217.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_listUserWords_args = function(args) {
  this.authToken = null;
  this.langid = null;
  this.pageToken = null;
  this.limit = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.langid !== undefined && args.langid !== null) {
      this.langid = args.langid;
    }
    if (args.pageToken !== undefined && args.pageToken !== null) {
      this.pageToken = args.pageToken;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
LextendBase_listUserWords_args.prototype = {};
LextendBase_listUserWords_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.langid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.pageToken = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.limit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_listUserWords_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_listUserWords_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.langid !== null && this.langid !== undefined) {
    output.writeFieldBegin('langid', Thrift.Type.STRING, 2);
    output.writeString(this.langid);
    output.writeFieldEnd();
  }
  if (this.pageToken !== null && this.pageToken !== undefined) {
    output.writeFieldBegin('pageToken', Thrift.Type.I64, 3);
    output.writeI64(this.pageToken);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I64, 4);
    output.writeI64(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_listUserWords_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.LextendIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UserWordList(args.success);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
LextendBase_listUserWords_result.prototype = {};
LextendBase_listUserWords_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserWordList();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.LextendIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_listUserWords_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_listUserWords_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_updateUserMaterial_args = function(args) {
  this.authToken = null;
  this.material = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.material !== undefined && args.material !== null) {
      this.material = new learning_ttypes.Material(args.material);
    }
  }
};
LextendBase_updateUserMaterial_args.prototype = {};
LextendBase_updateUserMaterial_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.material = new learning_ttypes.Material();
        this.material.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_updateUserMaterial_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_updateUserMaterial_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.material !== null && this.material !== undefined) {
    output.writeFieldBegin('material', Thrift.Type.STRUCT, 2);
    this.material.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_updateUserMaterial_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.LextendIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new learning_ttypes.ObjectUpdateInfo(args.success);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
LextendBase_updateUserMaterial_result.prototype = {};
LextendBase_updateUserMaterial_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new learning_ttypes.ObjectUpdateInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.LextendIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_updateUserMaterial_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_updateUserMaterial_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_createUserMaterial_args = function(args) {
  this.authToken = null;
  this.material = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.material !== undefined && args.material !== null) {
      this.material = new learning_ttypes.Material(args.material);
    }
  }
};
LextendBase_createUserMaterial_args.prototype = {};
LextendBase_createUserMaterial_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.material = new learning_ttypes.Material();
        this.material.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_createUserMaterial_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_createUserMaterial_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.material !== null && this.material !== undefined) {
    output.writeFieldBegin('material', Thrift.Type.STRUCT, 2);
    this.material.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_createUserMaterial_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.LextendIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new learning_ttypes.ObjectUpdateInfo(args.success);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
LextendBase_createUserMaterial_result.prototype = {};
LextendBase_createUserMaterial_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new learning_ttypes.ObjectUpdateInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.LextendIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_createUserMaterial_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_createUserMaterial_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_listUserMaterials_args = function(args) {
  this.authToken = null;
  this.langid = null;
  this.vialangid = null;
  this.pageToken = null;
  this.limit = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.langid !== undefined && args.langid !== null) {
      this.langid = args.langid;
    }
    if (args.vialangid !== undefined && args.vialangid !== null) {
      this.vialangid = args.vialangid;
    }
    if (args.pageToken !== undefined && args.pageToken !== null) {
      this.pageToken = args.pageToken;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
LextendBase_listUserMaterials_args.prototype = {};
LextendBase_listUserMaterials_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.langid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.vialangid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.pageToken = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.limit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_listUserMaterials_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_listUserMaterials_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.langid !== null && this.langid !== undefined) {
    output.writeFieldBegin('langid', Thrift.Type.STRING, 2);
    output.writeString(this.langid);
    output.writeFieldEnd();
  }
  if (this.vialangid !== null && this.vialangid !== undefined) {
    output.writeFieldBegin('vialangid', Thrift.Type.STRING, 3);
    output.writeString(this.vialangid);
    output.writeFieldEnd();
  }
  if (this.pageToken !== null && this.pageToken !== undefined) {
    output.writeFieldBegin('pageToken', Thrift.Type.I64, 4);
    output.writeI64(this.pageToken);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I64, 5);
    output.writeI64(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_listUserMaterials_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.LextendIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.MaterialList(args.success);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
LextendBase_listUserMaterials_result.prototype = {};
LextendBase_listUserMaterials_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.MaterialList();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.LextendIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_listUserMaterials_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_listUserMaterials_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_deleteUserMaterial_args = function(args) {
  this.authToken = null;
  this.materialUri = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.materialUri !== undefined && args.materialUri !== null) {
      this.materialUri = args.materialUri;
    }
  }
};
LextendBase_deleteUserMaterial_args.prototype = {};
LextendBase_deleteUserMaterial_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.materialUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_deleteUserMaterial_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_deleteUserMaterial_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.materialUri !== null && this.materialUri !== undefined) {
    output.writeFieldBegin('materialUri', Thrift.Type.STRING, 2);
    output.writeString(this.materialUri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_deleteUserMaterial_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.LextendIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new learning_ttypes.ObjectUpdateInfo(args.success);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
LextendBase_deleteUserMaterial_result.prototype = {};
LextendBase_deleteUserMaterial_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new learning_ttypes.ObjectUpdateInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.LextendIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_deleteUserMaterial_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_deleteUserMaterial_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_listUserFavourites_args = function(args) {
  this.authToken = null;
  this.langid = null;
  this.vialangid = null;
  this.pageToken = null;
  this.limit = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.langid !== undefined && args.langid !== null) {
      this.langid = args.langid;
    }
    if (args.vialangid !== undefined && args.vialangid !== null) {
      this.vialangid = args.vialangid;
    }
    if (args.pageToken !== undefined && args.pageToken !== null) {
      this.pageToken = args.pageToken;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
LextendBase_listUserFavourites_args.prototype = {};
LextendBase_listUserFavourites_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.langid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.vialangid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.pageToken = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.limit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_listUserFavourites_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_listUserFavourites_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.langid !== null && this.langid !== undefined) {
    output.writeFieldBegin('langid', Thrift.Type.STRING, 2);
    output.writeString(this.langid);
    output.writeFieldEnd();
  }
  if (this.vialangid !== null && this.vialangid !== undefined) {
    output.writeFieldBegin('vialangid', Thrift.Type.STRING, 3);
    output.writeString(this.vialangid);
    output.writeFieldEnd();
  }
  if (this.pageToken !== null && this.pageToken !== undefined) {
    output.writeFieldBegin('pageToken', Thrift.Type.I64, 4);
    output.writeI64(this.pageToken);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I64, 5);
    output.writeI64(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_listUserFavourites_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.LextendIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.MaterialList(args.success);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
LextendBase_listUserFavourites_result.prototype = {};
LextendBase_listUserFavourites_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.MaterialList();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.LextendIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_listUserFavourites_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_listUserFavourites_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getMaterialSummaries_args = function(args) {
  this.authToken = null;
  this.uris = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.uris !== undefined && args.uris !== null) {
      this.uris = Thrift.copyList(args.uris, [null]);
    }
  }
};
LextendBase_getMaterialSummaries_args.prototype = {};
LextendBase_getMaterialSummaries_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size218 = 0;
        var _rtmp3222;
        this.uris = [];
        var _etype221 = 0;
        _rtmp3222 = input.readListBegin();
        _etype221 = _rtmp3222.etype;
        _size218 = _rtmp3222.size;
        for (var _i223 = 0; _i223 < _size218; ++_i223)
        {
          var elem224 = null;
          elem224 = input.readString();
          this.uris.push(elem224);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getMaterialSummaries_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getMaterialSummaries_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.uris !== null && this.uris !== undefined) {
    output.writeFieldBegin('uris', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.uris.length);
    for (var iter225 in this.uris)
    {
      if (this.uris.hasOwnProperty(iter225))
      {
        iter225 = this.uris[iter225];
        output.writeString(iter225);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getMaterialSummaries_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.LextendIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [learning_ttypes.MaterialSummary]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
LextendBase_getMaterialSummaries_result.prototype = {};
LextendBase_getMaterialSummaries_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size226 = 0;
        var _rtmp3230;
        this.success = [];
        var _etype229 = 0;
        _rtmp3230 = input.readListBegin();
        _etype229 = _rtmp3230.etype;
        _size226 = _rtmp3230.size;
        for (var _i231 = 0; _i231 < _size226; ++_i231)
        {
          var elem232 = null;
          elem232 = new learning_ttypes.MaterialSummary();
          elem232.read(input);
          this.success.push(elem232);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.LextendIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getMaterialSummaries_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getMaterialSummaries_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter233 in this.success)
    {
      if (this.success.hasOwnProperty(iter233))
      {
        iter233 = this.success[iter233];
        iter233.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getRecommendedMaterials_args = function(args) {
  this.authToken = null;
  this.langid = null;
  this.vialangid = null;
  this.timezone = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.langid !== undefined && args.langid !== null) {
      this.langid = args.langid;
    }
    if (args.vialangid !== undefined && args.vialangid !== null) {
      this.vialangid = args.vialangid;
    }
    if (args.timezone !== undefined && args.timezone !== null) {
      this.timezone = args.timezone;
    }
  }
};
LextendBase_getRecommendedMaterials_args.prototype = {};
LextendBase_getRecommendedMaterials_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.langid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.vialangid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.timezone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getRecommendedMaterials_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getRecommendedMaterials_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.langid !== null && this.langid !== undefined) {
    output.writeFieldBegin('langid', Thrift.Type.STRING, 2);
    output.writeString(this.langid);
    output.writeFieldEnd();
  }
  if (this.vialangid !== null && this.vialangid !== undefined) {
    output.writeFieldBegin('vialangid', Thrift.Type.STRING, 3);
    output.writeString(this.vialangid);
    output.writeFieldEnd();
  }
  if (this.timezone !== null && this.timezone !== undefined) {
    output.writeFieldBegin('timezone', Thrift.Type.STRING, 4);
    output.writeString(this.timezone);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getRecommendedMaterials_result = function(args) {
  this.success = null;
  this.ioerr = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [learning_ttypes.MaterialSummary]);
    }
    if (args.ioerr !== undefined && args.ioerr !== null) {
      this.ioerr = args.ioerr;
    }
  }
};
LextendBase_getRecommendedMaterials_result.prototype = {};
LextendBase_getRecommendedMaterials_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size234 = 0;
        var _rtmp3238;
        this.success = [];
        var _etype237 = 0;
        _rtmp3238 = input.readListBegin();
        _etype237 = _rtmp3238.etype;
        _size234 = _rtmp3238.size;
        for (var _i239 = 0; _i239 < _size234; ++_i239)
        {
          var elem240 = null;
          elem240 = new learning_ttypes.MaterialSummary();
          elem240.read(input);
          this.success.push(elem240);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerr = new ttypes.LextendIOError();
        this.ioerr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getRecommendedMaterials_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getRecommendedMaterials_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter241 in this.success)
    {
      if (this.success.hasOwnProperty(iter241))
      {
        iter241 = this.success[iter241];
        iter241.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ioerr !== null && this.ioerr !== undefined) {
    output.writeFieldBegin('ioerr', Thrift.Type.STRUCT, 1);
    this.ioerr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getMaterialAnnot_args = function(args) {
  this.authToken = null;
  this.resourceUri = null;
  this.contentDigest = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.resourceUri !== undefined && args.resourceUri !== null) {
      this.resourceUri = args.resourceUri;
    }
    if (args.contentDigest !== undefined && args.contentDigest !== null) {
      this.contentDigest = args.contentDigest;
    }
  }
};
LextendBase_getMaterialAnnot_args.prototype = {};
LextendBase_getMaterialAnnot_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.resourceUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.contentDigest = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getMaterialAnnot_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getMaterialAnnot_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.resourceUri !== null && this.resourceUri !== undefined) {
    output.writeFieldBegin('resourceUri', Thrift.Type.STRING, 2);
    output.writeString(this.resourceUri);
    output.writeFieldEnd();
  }
  if (this.contentDigest !== null && this.contentDigest !== undefined) {
    output.writeFieldBegin('contentDigest', Thrift.Type.STRING, 3);
    output.writeString(this.contentDigest);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getMaterialAnnot_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.LextendIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new learning_ttypes.MaterialAnnot(args.success);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
LextendBase_getMaterialAnnot_result.prototype = {};
LextendBase_getMaterialAnnot_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new learning_ttypes.MaterialAnnot();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.LextendIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getMaterialAnnot_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getMaterialAnnot_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getMaterial_args = function(args) {
  this.authToken = null;
  this.resourceUri = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.resourceUri !== undefined && args.resourceUri !== null) {
      this.resourceUri = args.resourceUri;
    }
  }
};
LextendBase_getMaterial_args.prototype = {};
LextendBase_getMaterial_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.resourceUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getMaterial_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getMaterial_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.resourceUri !== null && this.resourceUri !== undefined) {
    output.writeFieldBegin('resourceUri', Thrift.Type.STRING, 2);
    output.writeString(this.resourceUri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getMaterial_result = function(args) {
  this.success = null;
  this.ioerr = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.MaterialWrapper(args.success);
    }
    if (args.ioerr !== undefined && args.ioerr !== null) {
      this.ioerr = args.ioerr;
    }
  }
};
LextendBase_getMaterial_result.prototype = {};
LextendBase_getMaterial_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.MaterialWrapper();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerr = new ttypes.LextendIOError();
        this.ioerr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getMaterial_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getMaterial_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ioerr !== null && this.ioerr !== undefined) {
    output.writeFieldBegin('ioerr', Thrift.Type.STRUCT, 1);
    this.ioerr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_addComment_args = function(args) {
  this.authToken = null;
  this.materialUri = null;
  this.comment = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.materialUri !== undefined && args.materialUri !== null) {
      this.materialUri = args.materialUri;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = new learning_ttypes.Comment(args.comment);
    }
  }
};
LextendBase_addComment_args.prototype = {};
LextendBase_addComment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.materialUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.comment = new learning_ttypes.Comment();
        this.comment.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_addComment_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_addComment_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.materialUri !== null && this.materialUri !== undefined) {
    output.writeFieldBegin('materialUri', Thrift.Type.STRING, 2);
    output.writeString(this.materialUri);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRUCT, 3);
    this.comment.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_addComment_result = function(args) {
  this.success = null;
  this.ioerr = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ioerr !== undefined && args.ioerr !== null) {
      this.ioerr = args.ioerr;
    }
  }
};
LextendBase_addComment_result.prototype = {};
LextendBase_addComment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerr = new ttypes.LextendIOError();
        this.ioerr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_addComment_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_addComment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ioerr !== null && this.ioerr !== undefined) {
    output.writeFieldBegin('ioerr', Thrift.Type.STRUCT, 1);
    this.ioerr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_editComment_args = function(args) {
  this.authToken = null;
  this.commentUri = null;
  this.newText = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.commentUri !== undefined && args.commentUri !== null) {
      this.commentUri = args.commentUri;
    }
    if (args.newText !== undefined && args.newText !== null) {
      this.newText = args.newText;
    }
  }
};
LextendBase_editComment_args.prototype = {};
LextendBase_editComment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.commentUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.newText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_editComment_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_editComment_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.commentUri !== null && this.commentUri !== undefined) {
    output.writeFieldBegin('commentUri', Thrift.Type.STRING, 2);
    output.writeString(this.commentUri);
    output.writeFieldEnd();
  }
  if (this.newText !== null && this.newText !== undefined) {
    output.writeFieldBegin('newText', Thrift.Type.STRING, 3);
    output.writeString(this.newText);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_editComment_result = function(args) {
  this.success = null;
  this.ioerr = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ioerr !== undefined && args.ioerr !== null) {
      this.ioerr = args.ioerr;
    }
  }
};
LextendBase_editComment_result.prototype = {};
LextendBase_editComment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerr = new ttypes.LextendIOError();
        this.ioerr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_editComment_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_editComment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ioerr !== null && this.ioerr !== undefined) {
    output.writeFieldBegin('ioerr', Thrift.Type.STRUCT, 1);
    this.ioerr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getMaterialComments_args = function(args) {
  this.authToken = null;
  this.resourceUri = null;
  this.pageToken = null;
  this.limit = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.resourceUri !== undefined && args.resourceUri !== null) {
      this.resourceUri = args.resourceUri;
    }
    if (args.pageToken !== undefined && args.pageToken !== null) {
      this.pageToken = args.pageToken;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
LextendBase_getMaterialComments_args.prototype = {};
LextendBase_getMaterialComments_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.resourceUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.pageToken = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.limit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getMaterialComments_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getMaterialComments_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.resourceUri !== null && this.resourceUri !== undefined) {
    output.writeFieldBegin('resourceUri', Thrift.Type.STRING, 2);
    output.writeString(this.resourceUri);
    output.writeFieldEnd();
  }
  if (this.pageToken !== null && this.pageToken !== undefined) {
    output.writeFieldBegin('pageToken', Thrift.Type.I64, 3);
    output.writeI64(this.pageToken);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I64, 4);
    output.writeI64(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getMaterialComments_result = function(args) {
  this.success = null;
  this.ioerr = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CommentList(args.success);
    }
    if (args.ioerr !== undefined && args.ioerr !== null) {
      this.ioerr = args.ioerr;
    }
  }
};
LextendBase_getMaterialComments_result.prototype = {};
LextendBase_getMaterialComments_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CommentList();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerr = new ttypes.LextendIOError();
        this.ioerr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getMaterialComments_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getMaterialComments_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ioerr !== null && this.ioerr !== undefined) {
    output.writeFieldBegin('ioerr', Thrift.Type.STRUCT, 1);
    this.ioerr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_likeMaterial_args = function(args) {
  this.authToken = null;
  this.resourceUri = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.resourceUri !== undefined && args.resourceUri !== null) {
      this.resourceUri = args.resourceUri;
    }
  }
};
LextendBase_likeMaterial_args.prototype = {};
LextendBase_likeMaterial_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.resourceUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_likeMaterial_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_likeMaterial_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.resourceUri !== null && this.resourceUri !== undefined) {
    output.writeFieldBegin('resourceUri', Thrift.Type.STRING, 2);
    output.writeString(this.resourceUri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_likeMaterial_result = function(args) {
  this.success = null;
  this.ioerr = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ioerr !== undefined && args.ioerr !== null) {
      this.ioerr = args.ioerr;
    }
  }
};
LextendBase_likeMaterial_result.prototype = {};
LextendBase_likeMaterial_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerr = new ttypes.LextendIOError();
        this.ioerr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_likeMaterial_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_likeMaterial_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.ioerr !== null && this.ioerr !== undefined) {
    output.writeFieldBegin('ioerr', Thrift.Type.STRUCT, 1);
    this.ioerr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getMaterialFeedbackStats_args = function(args) {
  this.authToken = null;
  this.materialUris = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.materialUris !== undefined && args.materialUris !== null) {
      this.materialUris = Thrift.copyList(args.materialUris, [null]);
    }
  }
};
LextendBase_getMaterialFeedbackStats_args.prototype = {};
LextendBase_getMaterialFeedbackStats_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size242 = 0;
        var _rtmp3246;
        this.materialUris = [];
        var _etype245 = 0;
        _rtmp3246 = input.readListBegin();
        _etype245 = _rtmp3246.etype;
        _size242 = _rtmp3246.size;
        for (var _i247 = 0; _i247 < _size242; ++_i247)
        {
          var elem248 = null;
          elem248 = input.readString();
          this.materialUris.push(elem248);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getMaterialFeedbackStats_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getMaterialFeedbackStats_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.materialUris !== null && this.materialUris !== undefined) {
    output.writeFieldBegin('materialUris', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.materialUris.length);
    for (var iter249 in this.materialUris)
    {
      if (this.materialUris.hasOwnProperty(iter249))
      {
        iter249 = this.materialUris[iter249];
        output.writeString(iter249);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getMaterialFeedbackStats_result = function(args) {
  this.success = null;
  this.ioerr = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [ttypes.FeedbackStat]);
    }
    if (args.ioerr !== undefined && args.ioerr !== null) {
      this.ioerr = args.ioerr;
    }
  }
};
LextendBase_getMaterialFeedbackStats_result.prototype = {};
LextendBase_getMaterialFeedbackStats_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size250 = 0;
        var _rtmp3254;
        this.success = {};
        var _ktype251 = 0;
        var _vtype252 = 0;
        _rtmp3254 = input.readMapBegin();
        _ktype251 = _rtmp3254.ktype;
        _vtype252 = _rtmp3254.vtype;
        _size250 = _rtmp3254.size;
        for (var _i255 = 0; _i255 < _size250; ++_i255)
        {
          var key256 = null;
          var val257 = null;
          key256 = input.readString();
          val257 = new ttypes.FeedbackStat();
          val257.read(input);
          this.success[key256] = val257;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerr = new ttypes.LextendIOError();
        this.ioerr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getMaterialFeedbackStats_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getMaterialFeedbackStats_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter258 in this.success)
    {
      if (this.success.hasOwnProperty(kiter258))
      {
        var viter259 = this.success[kiter258];
        output.writeString(kiter258);
        viter259.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ioerr !== null && this.ioerr !== undefined) {
    output.writeFieldBegin('ioerr', Thrift.Type.STRUCT, 1);
    this.ioerr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_updateUserWordbook_args = function(args) {
  this.authToken = null;
  this.wordbook = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.wordbook !== undefined && args.wordbook !== null) {
      this.wordbook = new learning_ttypes.Wordbook(args.wordbook);
    }
  }
};
LextendBase_updateUserWordbook_args.prototype = {};
LextendBase_updateUserWordbook_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.wordbook = new learning_ttypes.Wordbook();
        this.wordbook.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_updateUserWordbook_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_updateUserWordbook_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.wordbook !== null && this.wordbook !== undefined) {
    output.writeFieldBegin('wordbook', Thrift.Type.STRUCT, 2);
    this.wordbook.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_updateUserWordbook_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.LextendIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new learning_ttypes.ObjectUpdateInfo(args.success);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
LextendBase_updateUserWordbook_result.prototype = {};
LextendBase_updateUserWordbook_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new learning_ttypes.ObjectUpdateInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.LextendIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_updateUserWordbook_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_updateUserWordbook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_createUserWordbook_args = function(args) {
  this.authToken = null;
  this.wordbook = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.wordbook !== undefined && args.wordbook !== null) {
      this.wordbook = new learning_ttypes.Wordbook(args.wordbook);
    }
  }
};
LextendBase_createUserWordbook_args.prototype = {};
LextendBase_createUserWordbook_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.wordbook = new learning_ttypes.Wordbook();
        this.wordbook.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_createUserWordbook_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_createUserWordbook_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.wordbook !== null && this.wordbook !== undefined) {
    output.writeFieldBegin('wordbook', Thrift.Type.STRUCT, 2);
    this.wordbook.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_createUserWordbook_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.LextendIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new learning_ttypes.ObjectUpdateInfo(args.success);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
LextendBase_createUserWordbook_result.prototype = {};
LextendBase_createUserWordbook_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new learning_ttypes.ObjectUpdateInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.LextendIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_createUserWordbook_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_createUserWordbook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_listUserWordbook_args = function(args) {
  this.authToken = null;
  this.langid = null;
  this.pageToken = null;
  this.limit = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.langid !== undefined && args.langid !== null) {
      this.langid = args.langid;
    }
    if (args.pageToken !== undefined && args.pageToken !== null) {
      this.pageToken = args.pageToken;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
LextendBase_listUserWordbook_args.prototype = {};
LextendBase_listUserWordbook_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.langid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.pageToken = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_listUserWordbook_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_listUserWordbook_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.langid !== null && this.langid !== undefined) {
    output.writeFieldBegin('langid', Thrift.Type.STRING, 2);
    output.writeString(this.langid);
    output.writeFieldEnd();
  }
  if (this.pageToken !== null && this.pageToken !== undefined) {
    output.writeFieldBegin('pageToken', Thrift.Type.I64, 3);
    output.writeI64(this.pageToken);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 4);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_listUserWordbook_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.LextendIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.WordbookList(args.success);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
LextendBase_listUserWordbook_result.prototype = {};
LextendBase_listUserWordbook_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.WordbookList();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.LextendIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_listUserWordbook_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_listUserWordbook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getWordbook_args = function(args) {
  this.authToken = null;
  this.uri = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    }
  }
};
LextendBase_getWordbook_args.prototype = {};
LextendBase_getWordbook_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getWordbook_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getWordbook_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 2);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getWordbook_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.LextendIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new learning_ttypes.Wordbook(args.success);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
LextendBase_getWordbook_result.prototype = {};
LextendBase_getWordbook_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new learning_ttypes.Wordbook();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.LextendIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getWordbook_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getWordbook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_deleteUserWordbook_args = function(args) {
  this.authToken = null;
  this.uri = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    }
  }
};
LextendBase_deleteUserWordbook_args.prototype = {};
LextendBase_deleteUserWordbook_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_deleteUserWordbook_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_deleteUserWordbook_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 2);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_deleteUserWordbook_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.LextendIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new learning_ttypes.ObjectUpdateInfo(args.success);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
LextendBase_deleteUserWordbook_result.prototype = {};
LextendBase_deleteUserWordbook_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new learning_ttypes.ObjectUpdateInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.LextendIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_deleteUserWordbook_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_deleteUserWordbook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getRecommendedWordbooks_args = function(args) {
  this.authToken = null;
  this.langid = null;
  this.pageToken = null;
  this.limit = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.langid !== undefined && args.langid !== null) {
      this.langid = args.langid;
    }
    if (args.pageToken !== undefined && args.pageToken !== null) {
      this.pageToken = args.pageToken;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
LextendBase_getRecommendedWordbooks_args.prototype = {};
LextendBase_getRecommendedWordbooks_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.langid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.pageToken = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getRecommendedWordbooks_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getRecommendedWordbooks_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.langid !== null && this.langid !== undefined) {
    output.writeFieldBegin('langid', Thrift.Type.STRING, 2);
    output.writeString(this.langid);
    output.writeFieldEnd();
  }
  if (this.pageToken !== null && this.pageToken !== undefined) {
    output.writeFieldBegin('pageToken', Thrift.Type.I64, 3);
    output.writeI64(this.pageToken);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 4);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getRecommendedWordbooks_result = function(args) {
  this.success = null;
  this.ioerr = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.WordbookList(args.success);
    }
    if (args.ioerr !== undefined && args.ioerr !== null) {
      this.ioerr = args.ioerr;
    }
  }
};
LextendBase_getRecommendedWordbooks_result.prototype = {};
LextendBase_getRecommendedWordbooks_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.WordbookList();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerr = new ttypes.LextendIOError();
        this.ioerr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getRecommendedWordbooks_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getRecommendedWordbooks_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ioerr !== null && this.ioerr !== undefined) {
    output.writeFieldBegin('ioerr', Thrift.Type.STRUCT, 1);
    this.ioerr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_cloneWordbook_args = function(args) {
  this.authToken = null;
  this.wordbookUri = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.wordbookUri !== undefined && args.wordbookUri !== null) {
      this.wordbookUri = args.wordbookUri;
    }
  }
};
LextendBase_cloneWordbook_args.prototype = {};
LextendBase_cloneWordbook_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.wordbookUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_cloneWordbook_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_cloneWordbook_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.wordbookUri !== null && this.wordbookUri !== undefined) {
    output.writeFieldBegin('wordbookUri', Thrift.Type.STRING, 2);
    output.writeString(this.wordbookUri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_cloneWordbook_result = function(args) {
  this.success = null;
  this.ioerr = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ioerr !== undefined && args.ioerr !== null) {
      this.ioerr = args.ioerr;
    }
  }
};
LextendBase_cloneWordbook_result.prototype = {};
LextendBase_cloneWordbook_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerr = new ttypes.LextendIOError();
        this.ioerr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_cloneWordbook_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_cloneWordbook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ioerr !== null && this.ioerr !== undefined) {
    output.writeFieldBegin('ioerr', Thrift.Type.STRUCT, 1);
    this.ioerr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_updateLearnRecords_args = function(args) {
  this.authToken = null;
  this.records = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.records !== undefined && args.records !== null) {
      this.records = Thrift.copyList(args.records, [learning_ttypes.LearningRecord]);
    }
  }
};
LextendBase_updateLearnRecords_args.prototype = {};
LextendBase_updateLearnRecords_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size260 = 0;
        var _rtmp3264;
        this.records = [];
        var _etype263 = 0;
        _rtmp3264 = input.readListBegin();
        _etype263 = _rtmp3264.etype;
        _size260 = _rtmp3264.size;
        for (var _i265 = 0; _i265 < _size260; ++_i265)
        {
          var elem266 = null;
          elem266 = new learning_ttypes.LearningRecord();
          elem266.read(input);
          this.records.push(elem266);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_updateLearnRecords_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_updateLearnRecords_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.records !== null && this.records !== undefined) {
    output.writeFieldBegin('records', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.records.length);
    for (var iter267 in this.records)
    {
      if (this.records.hasOwnProperty(iter267))
      {
        iter267 = this.records[iter267];
        iter267.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_updateLearnRecords_result = function(args) {
  this.success = null;
  this.ioerr = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ioerr !== undefined && args.ioerr !== null) {
      this.ioerr = args.ioerr;
    }
  }
};
LextendBase_updateLearnRecords_result.prototype = {};
LextendBase_updateLearnRecords_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerr = new ttypes.LextendIOError();
        this.ioerr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_updateLearnRecords_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_updateLearnRecords_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ioerr !== null && this.ioerr !== undefined) {
    output.writeFieldBegin('ioerr', Thrift.Type.STRUCT, 1);
    this.ioerr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_updateReadRecords_args = function(args) {
  this.authToken = null;
  this.records = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.records !== undefined && args.records !== null) {
      this.records = Thrift.copyList(args.records, [learning_ttypes.ReadingRecord]);
    }
  }
};
LextendBase_updateReadRecords_args.prototype = {};
LextendBase_updateReadRecords_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size268 = 0;
        var _rtmp3272;
        this.records = [];
        var _etype271 = 0;
        _rtmp3272 = input.readListBegin();
        _etype271 = _rtmp3272.etype;
        _size268 = _rtmp3272.size;
        for (var _i273 = 0; _i273 < _size268; ++_i273)
        {
          var elem274 = null;
          elem274 = new learning_ttypes.ReadingRecord();
          elem274.read(input);
          this.records.push(elem274);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_updateReadRecords_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_updateReadRecords_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.records !== null && this.records !== undefined) {
    output.writeFieldBegin('records', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.records.length);
    for (var iter275 in this.records)
    {
      if (this.records.hasOwnProperty(iter275))
      {
        iter275 = this.records[iter275];
        iter275.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_updateReadRecords_result = function(args) {
  this.success = null;
  this.ioerr = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ioerr !== undefined && args.ioerr !== null) {
      this.ioerr = args.ioerr;
    }
  }
};
LextendBase_updateReadRecords_result.prototype = {};
LextendBase_updateReadRecords_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerr = new ttypes.LextendIOError();
        this.ioerr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_updateReadRecords_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_updateReadRecords_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ioerr !== null && this.ioerr !== undefined) {
    output.writeFieldBegin('ioerr', Thrift.Type.STRUCT, 1);
    this.ioerr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getUserVocab_args = function(args) {
  this.authToken = null;
  this.langid = null;
  this.pageToken = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.langid !== undefined && args.langid !== null) {
      this.langid = args.langid;
    }
    if (args.pageToken !== undefined && args.pageToken !== null) {
      this.pageToken = args.pageToken;
    }
  }
};
LextendBase_getUserVocab_args.prototype = {};
LextendBase_getUserVocab_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.langid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.pageToken = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getUserVocab_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getUserVocab_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.langid !== null && this.langid !== undefined) {
    output.writeFieldBegin('langid', Thrift.Type.STRING, 2);
    output.writeString(this.langid);
    output.writeFieldEnd();
  }
  if (this.pageToken !== null && this.pageToken !== undefined) {
    output.writeFieldBegin('pageToken', Thrift.Type.I64, 3);
    output.writeI64(this.pageToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getUserVocab_result = function(args) {
  this.success = null;
  this.ioerr = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UserVocab(args.success);
    }
    if (args.ioerr !== undefined && args.ioerr !== null) {
      this.ioerr = args.ioerr;
    }
  }
};
LextendBase_getUserVocab_result.prototype = {};
LextendBase_getUserVocab_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserVocab();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerr = new ttypes.LextendIOError();
        this.ioerr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getUserVocab_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getUserVocab_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ioerr !== null && this.ioerr !== undefined) {
    output.writeFieldBegin('ioerr', Thrift.Type.STRUCT, 1);
    this.ioerr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getNumLearnedWordByTime_args = function(args) {
  this.authToken = null;
  this.langid = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.langid !== undefined && args.langid !== null) {
      this.langid = args.langid;
    }
  }
};
LextendBase_getNumLearnedWordByTime_args.prototype = {};
LextendBase_getNumLearnedWordByTime_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.langid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getNumLearnedWordByTime_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getNumLearnedWordByTime_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.langid !== null && this.langid !== undefined) {
    output.writeFieldBegin('langid', Thrift.Type.STRING, 2);
    output.writeString(this.langid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getNumLearnedWordByTime_result = function(args) {
  this.success = null;
  this.ioerr = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Statistic(args.success);
    }
    if (args.ioerr !== undefined && args.ioerr !== null) {
      this.ioerr = args.ioerr;
    }
  }
};
LextendBase_getNumLearnedWordByTime_result.prototype = {};
LextendBase_getNumLearnedWordByTime_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Statistic();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerr = new ttypes.LextendIOError();
        this.ioerr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getNumLearnedWordByTime_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getNumLearnedWordByTime_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ioerr !== null && this.ioerr !== undefined) {
    output.writeFieldBegin('ioerr', Thrift.Type.STRUCT, 1);
    this.ioerr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getSupportedLanguage_args = function(args) {
};
LextendBase_getSupportedLanguage_args.prototype = {};
LextendBase_getSupportedLanguage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getSupportedLanguage_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getSupportedLanguage_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getSupportedLanguage_result = function(args) {
  this.success = null;
  this.ioerror = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerror = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Language(args.success);
    }
    if (args.ioerror !== undefined && args.ioerror !== null) {
      this.ioerror = args.ioerror;
    }
  }
};
LextendBase_getSupportedLanguage_result.prototype = {};
LextendBase_getSupportedLanguage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Language();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerror = new ttypes.LextendIOError();
        this.ioerror.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getSupportedLanguage_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getSupportedLanguage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ioerror !== null && this.ioerror !== undefined) {
    output.writeFieldBegin('ioerror', Thrift.Type.STRUCT, 1);
    this.ioerror.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getSyncState_args = function(args) {
  this.authToken = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
  }
};
LextendBase_getSyncState_args.prototype = {};
LextendBase_getSyncState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getSyncState_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getSyncState_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getSyncState_result = function(args) {
  this.success = null;
  this.ioerror = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerror = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SyncState(args.success);
    }
    if (args.ioerror !== undefined && args.ioerror !== null) {
      this.ioerror = args.ioerror;
    }
  }
};
LextendBase_getSyncState_result.prototype = {};
LextendBase_getSyncState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SyncState();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerror = new ttypes.LextendIOError();
        this.ioerror.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getSyncState_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getSyncState_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ioerror !== null && this.ioerror !== undefined) {
    output.writeFieldBegin('ioerror', Thrift.Type.STRUCT, 1);
    this.ioerror.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getSyncChunk_args = function(args) {
  this.authToken = null;
  this.afterUSN = null;
  this.lastUSN = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.afterUSN !== undefined && args.afterUSN !== null) {
      this.afterUSN = args.afterUSN;
    }
    if (args.lastUSN !== undefined && args.lastUSN !== null) {
      this.lastUSN = args.lastUSN;
    }
  }
};
LextendBase_getSyncChunk_args.prototype = {};
LextendBase_getSyncChunk_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.afterUSN = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.lastUSN = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getSyncChunk_args.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getSyncChunk_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.afterUSN !== null && this.afterUSN !== undefined) {
    output.writeFieldBegin('afterUSN', Thrift.Type.I64, 2);
    output.writeI64(this.afterUSN);
    output.writeFieldEnd();
  }
  if (this.lastUSN !== null && this.lastUSN !== undefined) {
    output.writeFieldBegin('lastUSN', Thrift.Type.I64, 3);
    output.writeI64(this.lastUSN);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBase_getSyncChunk_result = function(args) {
  this.success = null;
  this.ioerror = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerror = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SyncChunk(args.success);
    }
    if (args.ioerror !== undefined && args.ioerror !== null) {
      this.ioerror = args.ioerror;
    }
  }
};
LextendBase_getSyncChunk_result.prototype = {};
LextendBase_getSyncChunk_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SyncChunk();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerror = new ttypes.LextendIOError();
        this.ioerror.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendBase_getSyncChunk_result.prototype.write = function(output) {
  output.writeStructBegin('LextendBase_getSyncChunk_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ioerror !== null && this.ioerror !== undefined) {
    output.writeFieldBegin('ioerror', Thrift.Type.STRUCT, 1);
    this.ioerror.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendBaseClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
LextendBaseClient.prototype = {};
LextendBaseClient.prototype.seqid = function() { return this._seqid; }
LextendBaseClient.prototype.new_seqid = function() { return this._seqid += 1; }
LextendBaseClient.prototype.startLearningNewLanguage = function(authToken, langid, vialangid, startLevel, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_startLearningNewLanguage(authToken, langid, vialangid, startLevel);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_startLearningNewLanguage(authToken, langid, vialangid, startLevel);
  }
};

LextendBaseClient.prototype.send_startLearningNewLanguage = function(authToken, langid, vialangid, startLevel) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('startLearningNewLanguage', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_startLearningNewLanguage_args();
  args.authToken = authToken;
  args.langid = langid;
  args.vialangid = vialangid;
  args.startLevel = startLevel;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_startLearningNewLanguage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_startLearningNewLanguage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerr) {
    return callback(result.ioerr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('startLearningNewLanguage failed: unknown result');
};
LextendBaseClient.prototype.updateLearningSetting = function(authToken, langid, numWordPerDay, numNewWordPerDay, level, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateLearningSetting(authToken, langid, numWordPerDay, numNewWordPerDay, level);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateLearningSetting(authToken, langid, numWordPerDay, numNewWordPerDay, level);
  }
};

LextendBaseClient.prototype.send_updateLearningSetting = function(authToken, langid, numWordPerDay, numNewWordPerDay, level) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateLearningSetting', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_updateLearningSetting_args();
  args.authToken = authToken;
  args.langid = langid;
  args.numWordPerDay = numWordPerDay;
  args.numNewWordPerDay = numNewWordPerDay;
  args.level = level;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_updateLearningSetting = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_updateLearningSetting_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateLearningSetting failed: unknown result');
};
LextendBaseClient.prototype.getLearningSettings = function(authToken, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getLearningSettings(authToken);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getLearningSettings(authToken);
  }
};

LextendBaseClient.prototype.send_getLearningSettings = function(authToken) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getLearningSettings', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_getLearningSettings_args();
  args.authToken = authToken;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_getLearningSettings = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_getLearningSettings_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getLearningSettings failed: unknown result');
};
LextendBaseClient.prototype.lookup = function(authToken, fromlangid, tolangid, word, searchExample, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_lookup(authToken, fromlangid, tolangid, word, searchExample);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_lookup(authToken, fromlangid, tolangid, word, searchExample);
  }
};

LextendBaseClient.prototype.send_lookup = function(authToken, fromlangid, tolangid, word, searchExample) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('lookup', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_lookup_args();
  args.authToken = authToken;
  args.fromlangid = fromlangid;
  args.tolangid = tolangid;
  args.word = word;
  args.searchExample = searchExample;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_lookup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_lookup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerr) {
    return callback(result.ioerr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('lookup failed: unknown result');
};
LextendBaseClient.prototype.downloadDictionary = function(authToken, fromlangid, tolangid, fromEntryNum, toEntryNum, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_downloadDictionary(authToken, fromlangid, tolangid, fromEntryNum, toEntryNum);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_downloadDictionary(authToken, fromlangid, tolangid, fromEntryNum, toEntryNum);
  }
};

LextendBaseClient.prototype.send_downloadDictionary = function(authToken, fromlangid, tolangid, fromEntryNum, toEntryNum) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('downloadDictionary', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_downloadDictionary_args();
  args.authToken = authToken;
  args.fromlangid = fromlangid;
  args.tolangid = tolangid;
  args.fromEntryNum = fromEntryNum;
  args.toEntryNum = toEntryNum;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_downloadDictionary = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_downloadDictionary_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerr) {
    return callback(result.ioerr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('downloadDictionary failed: unknown result');
};
LextendBaseClient.prototype.getLookupSuggestions = function(authToken, fromlangid, tolangid, charSeq, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getLookupSuggestions(authToken, fromlangid, tolangid, charSeq);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getLookupSuggestions(authToken, fromlangid, tolangid, charSeq);
  }
};

LextendBaseClient.prototype.send_getLookupSuggestions = function(authToken, fromlangid, tolangid, charSeq) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getLookupSuggestions', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_getLookupSuggestions_args();
  args.authToken = authToken;
  args.fromlangid = fromlangid;
  args.tolangid = tolangid;
  args.charSeq = charSeq;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_getLookupSuggestions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_getLookupSuggestions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerr) {
    return callback(result.ioerr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getLookupSuggestions failed: unknown result');
};
LextendBaseClient.prototype.searchExamples = function(authToken, fromlangid, tolangid, word, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_searchExamples(authToken, fromlangid, tolangid, word);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_searchExamples(authToken, fromlangid, tolangid, word);
  }
};

LextendBaseClient.prototype.send_searchExamples = function(authToken, fromlangid, tolangid, word) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('searchExamples', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_searchExamples_args();
  args.authToken = authToken;
  args.fromlangid = fromlangid;
  args.tolangid = tolangid;
  args.word = word;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_searchExamples = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_searchExamples_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerr) {
    return callback(result.ioerr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('searchExamples failed: unknown result');
};
LextendBaseClient.prototype.getTodayWords = function(authToken, langid, vialangid, timezone, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTodayWords(authToken, langid, vialangid, timezone);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTodayWords(authToken, langid, vialangid, timezone);
  }
};

LextendBaseClient.prototype.send_getTodayWords = function(authToken, langid, vialangid, timezone) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTodayWords', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_getTodayWords_args();
  args.authToken = authToken;
  args.langid = langid;
  args.vialangid = vialangid;
  args.timezone = timezone;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_getTodayWords = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_getTodayWords_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerr) {
    return callback(result.ioerr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTodayWords failed: unknown result');
};
LextendBaseClient.prototype.updateUserWord = function(authToken, word, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateUserWord(authToken, word);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateUserWord(authToken, word);
  }
};

LextendBaseClient.prototype.send_updateUserWord = function(authToken, word) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateUserWord', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_updateUserWord_args();
  args.authToken = authToken;
  args.word = word;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_updateUserWord = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_updateUserWord_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateUserWord failed: unknown result');
};
LextendBaseClient.prototype.deleteUserWord = function(authToken, uri, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteUserWord(authToken, uri);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteUserWord(authToken, uri);
  }
};

LextendBaseClient.prototype.send_deleteUserWord = function(authToken, uri) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteUserWord', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_deleteUserWord_args();
  args.authToken = authToken;
  args.uri = uri;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_deleteUserWord = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_deleteUserWord_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteUserWord failed: unknown result');
};
LextendBaseClient.prototype.createUserWord = function(authToken, word, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createUserWord(authToken, word);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createUserWord(authToken, word);
  }
};

LextendBaseClient.prototype.send_createUserWord = function(authToken, word) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createUserWord', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_createUserWord_args();
  args.authToken = authToken;
  args.word = word;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_createUserWord = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_createUserWord_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createUserWord failed: unknown result');
};
LextendBaseClient.prototype.getUserWords = function(authToken, langid, words, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserWords(authToken, langid, words);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserWords(authToken, langid, words);
  }
};

LextendBaseClient.prototype.send_getUserWords = function(authToken, langid, words) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserWords', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_getUserWords_args();
  args.authToken = authToken;
  args.langid = langid;
  args.words = words;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_getUserWords = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_getUserWords_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserWords failed: unknown result');
};
LextendBaseClient.prototype.listUserWords = function(authToken, langid, pageToken, limit, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listUserWords(authToken, langid, pageToken, limit);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listUserWords(authToken, langid, pageToken, limit);
  }
};

LextendBaseClient.prototype.send_listUserWords = function(authToken, langid, pageToken, limit) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listUserWords', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_listUserWords_args();
  args.authToken = authToken;
  args.langid = langid;
  args.pageToken = pageToken;
  args.limit = limit;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_listUserWords = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_listUserWords_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listUserWords failed: unknown result');
};
LextendBaseClient.prototype.updateUserMaterial = function(authToken, material, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateUserMaterial(authToken, material);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateUserMaterial(authToken, material);
  }
};

LextendBaseClient.prototype.send_updateUserMaterial = function(authToken, material) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateUserMaterial', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_updateUserMaterial_args();
  args.authToken = authToken;
  args.material = material;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_updateUserMaterial = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_updateUserMaterial_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateUserMaterial failed: unknown result');
};
LextendBaseClient.prototype.createUserMaterial = function(authToken, material, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createUserMaterial(authToken, material);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createUserMaterial(authToken, material);
  }
};

LextendBaseClient.prototype.send_createUserMaterial = function(authToken, material) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createUserMaterial', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_createUserMaterial_args();
  args.authToken = authToken;
  args.material = material;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_createUserMaterial = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_createUserMaterial_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createUserMaterial failed: unknown result');
};
LextendBaseClient.prototype.listUserMaterials = function(authToken, langid, vialangid, pageToken, limit, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listUserMaterials(authToken, langid, vialangid, pageToken, limit);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listUserMaterials(authToken, langid, vialangid, pageToken, limit);
  }
};

LextendBaseClient.prototype.send_listUserMaterials = function(authToken, langid, vialangid, pageToken, limit) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listUserMaterials', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_listUserMaterials_args();
  args.authToken = authToken;
  args.langid = langid;
  args.vialangid = vialangid;
  args.pageToken = pageToken;
  args.limit = limit;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_listUserMaterials = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_listUserMaterials_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listUserMaterials failed: unknown result');
};
LextendBaseClient.prototype.deleteUserMaterial = function(authToken, materialUri, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteUserMaterial(authToken, materialUri);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteUserMaterial(authToken, materialUri);
  }
};

LextendBaseClient.prototype.send_deleteUserMaterial = function(authToken, materialUri) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteUserMaterial', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_deleteUserMaterial_args();
  args.authToken = authToken;
  args.materialUri = materialUri;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_deleteUserMaterial = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_deleteUserMaterial_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteUserMaterial failed: unknown result');
};
LextendBaseClient.prototype.listUserFavourites = function(authToken, langid, vialangid, pageToken, limit, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listUserFavourites(authToken, langid, vialangid, pageToken, limit);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listUserFavourites(authToken, langid, vialangid, pageToken, limit);
  }
};

LextendBaseClient.prototype.send_listUserFavourites = function(authToken, langid, vialangid, pageToken, limit) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listUserFavourites', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_listUserFavourites_args();
  args.authToken = authToken;
  args.langid = langid;
  args.vialangid = vialangid;
  args.pageToken = pageToken;
  args.limit = limit;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_listUserFavourites = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_listUserFavourites_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listUserFavourites failed: unknown result');
};
LextendBaseClient.prototype.getMaterialSummaries = function(authToken, uris, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getMaterialSummaries(authToken, uris);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getMaterialSummaries(authToken, uris);
  }
};

LextendBaseClient.prototype.send_getMaterialSummaries = function(authToken, uris) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMaterialSummaries', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_getMaterialSummaries_args();
  args.authToken = authToken;
  args.uris = uris;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_getMaterialSummaries = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_getMaterialSummaries_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMaterialSummaries failed: unknown result');
};
LextendBaseClient.prototype.getRecommendedMaterials = function(authToken, langid, vialangid, timezone, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRecommendedMaterials(authToken, langid, vialangid, timezone);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRecommendedMaterials(authToken, langid, vialangid, timezone);
  }
};

LextendBaseClient.prototype.send_getRecommendedMaterials = function(authToken, langid, vialangid, timezone) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRecommendedMaterials', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_getRecommendedMaterials_args();
  args.authToken = authToken;
  args.langid = langid;
  args.vialangid = vialangid;
  args.timezone = timezone;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_getRecommendedMaterials = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_getRecommendedMaterials_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerr) {
    return callback(result.ioerr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRecommendedMaterials failed: unknown result');
};
LextendBaseClient.prototype.getMaterialAnnot = function(authToken, resourceUri, contentDigest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getMaterialAnnot(authToken, resourceUri, contentDigest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getMaterialAnnot(authToken, resourceUri, contentDigest);
  }
};

LextendBaseClient.prototype.send_getMaterialAnnot = function(authToken, resourceUri, contentDigest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMaterialAnnot', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_getMaterialAnnot_args();
  args.authToken = authToken;
  args.resourceUri = resourceUri;
  args.contentDigest = contentDigest;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_getMaterialAnnot = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_getMaterialAnnot_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMaterialAnnot failed: unknown result');
};
LextendBaseClient.prototype.getMaterial = function(authToken, resourceUri, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getMaterial(authToken, resourceUri);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getMaterial(authToken, resourceUri);
  }
};

LextendBaseClient.prototype.send_getMaterial = function(authToken, resourceUri) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMaterial', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_getMaterial_args();
  args.authToken = authToken;
  args.resourceUri = resourceUri;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_getMaterial = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_getMaterial_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerr) {
    return callback(result.ioerr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMaterial failed: unknown result');
};
LextendBaseClient.prototype.addComment = function(authToken, materialUri, comment, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addComment(authToken, materialUri, comment);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addComment(authToken, materialUri, comment);
  }
};

LextendBaseClient.prototype.send_addComment = function(authToken, materialUri, comment) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addComment', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_addComment_args();
  args.authToken = authToken;
  args.materialUri = materialUri;
  args.comment = comment;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_addComment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_addComment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerr) {
    return callback(result.ioerr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addComment failed: unknown result');
};
LextendBaseClient.prototype.editComment = function(authToken, commentUri, newText, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_editComment(authToken, commentUri, newText);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_editComment(authToken, commentUri, newText);
  }
};

LextendBaseClient.prototype.send_editComment = function(authToken, commentUri, newText) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('editComment', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_editComment_args();
  args.authToken = authToken;
  args.commentUri = commentUri;
  args.newText = newText;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_editComment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_editComment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerr) {
    return callback(result.ioerr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('editComment failed: unknown result');
};
LextendBaseClient.prototype.getMaterialComments = function(authToken, resourceUri, pageToken, limit, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getMaterialComments(authToken, resourceUri, pageToken, limit);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getMaterialComments(authToken, resourceUri, pageToken, limit);
  }
};

LextendBaseClient.prototype.send_getMaterialComments = function(authToken, resourceUri, pageToken, limit) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMaterialComments', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_getMaterialComments_args();
  args.authToken = authToken;
  args.resourceUri = resourceUri;
  args.pageToken = pageToken;
  args.limit = limit;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_getMaterialComments = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_getMaterialComments_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerr) {
    return callback(result.ioerr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMaterialComments failed: unknown result');
};
LextendBaseClient.prototype.likeMaterial = function(authToken, resourceUri, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_likeMaterial(authToken, resourceUri);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_likeMaterial(authToken, resourceUri);
  }
};

LextendBaseClient.prototype.send_likeMaterial = function(authToken, resourceUri) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('likeMaterial', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_likeMaterial_args();
  args.authToken = authToken;
  args.resourceUri = resourceUri;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_likeMaterial = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_likeMaterial_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerr) {
    return callback(result.ioerr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('likeMaterial failed: unknown result');
};
LextendBaseClient.prototype.getMaterialFeedbackStats = function(authToken, materialUris, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getMaterialFeedbackStats(authToken, materialUris);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getMaterialFeedbackStats(authToken, materialUris);
  }
};

LextendBaseClient.prototype.send_getMaterialFeedbackStats = function(authToken, materialUris) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMaterialFeedbackStats', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_getMaterialFeedbackStats_args();
  args.authToken = authToken;
  args.materialUris = materialUris;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_getMaterialFeedbackStats = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_getMaterialFeedbackStats_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerr) {
    return callback(result.ioerr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMaterialFeedbackStats failed: unknown result');
};
LextendBaseClient.prototype.updateUserWordbook = function(authToken, wordbook, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateUserWordbook(authToken, wordbook);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateUserWordbook(authToken, wordbook);
  }
};

LextendBaseClient.prototype.send_updateUserWordbook = function(authToken, wordbook) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateUserWordbook', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_updateUserWordbook_args();
  args.authToken = authToken;
  args.wordbook = wordbook;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_updateUserWordbook = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_updateUserWordbook_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateUserWordbook failed: unknown result');
};
LextendBaseClient.prototype.createUserWordbook = function(authToken, wordbook, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createUserWordbook(authToken, wordbook);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createUserWordbook(authToken, wordbook);
  }
};

LextendBaseClient.prototype.send_createUserWordbook = function(authToken, wordbook) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createUserWordbook', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_createUserWordbook_args();
  args.authToken = authToken;
  args.wordbook = wordbook;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_createUserWordbook = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_createUserWordbook_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createUserWordbook failed: unknown result');
};
LextendBaseClient.prototype.listUserWordbook = function(authToken, langid, pageToken, limit, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listUserWordbook(authToken, langid, pageToken, limit);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listUserWordbook(authToken, langid, pageToken, limit);
  }
};

LextendBaseClient.prototype.send_listUserWordbook = function(authToken, langid, pageToken, limit) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listUserWordbook', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_listUserWordbook_args();
  args.authToken = authToken;
  args.langid = langid;
  args.pageToken = pageToken;
  args.limit = limit;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_listUserWordbook = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_listUserWordbook_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listUserWordbook failed: unknown result');
};
LextendBaseClient.prototype.getWordbook = function(authToken, uri, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getWordbook(authToken, uri);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getWordbook(authToken, uri);
  }
};

LextendBaseClient.prototype.send_getWordbook = function(authToken, uri) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getWordbook', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_getWordbook_args();
  args.authToken = authToken;
  args.uri = uri;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_getWordbook = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_getWordbook_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getWordbook failed: unknown result');
};
LextendBaseClient.prototype.deleteUserWordbook = function(authToken, uri, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteUserWordbook(authToken, uri);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteUserWordbook(authToken, uri);
  }
};

LextendBaseClient.prototype.send_deleteUserWordbook = function(authToken, uri) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteUserWordbook', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_deleteUserWordbook_args();
  args.authToken = authToken;
  args.uri = uri;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_deleteUserWordbook = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_deleteUserWordbook_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteUserWordbook failed: unknown result');
};
LextendBaseClient.prototype.getRecommendedWordbooks = function(authToken, langid, pageToken, limit, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRecommendedWordbooks(authToken, langid, pageToken, limit);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRecommendedWordbooks(authToken, langid, pageToken, limit);
  }
};

LextendBaseClient.prototype.send_getRecommendedWordbooks = function(authToken, langid, pageToken, limit) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRecommendedWordbooks', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_getRecommendedWordbooks_args();
  args.authToken = authToken;
  args.langid = langid;
  args.pageToken = pageToken;
  args.limit = limit;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_getRecommendedWordbooks = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_getRecommendedWordbooks_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerr) {
    return callback(result.ioerr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRecommendedWordbooks failed: unknown result');
};
LextendBaseClient.prototype.cloneWordbook = function(authToken, wordbookUri, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_cloneWordbook(authToken, wordbookUri);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_cloneWordbook(authToken, wordbookUri);
  }
};

LextendBaseClient.prototype.send_cloneWordbook = function(authToken, wordbookUri) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('cloneWordbook', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_cloneWordbook_args();
  args.authToken = authToken;
  args.wordbookUri = wordbookUri;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_cloneWordbook = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_cloneWordbook_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerr) {
    return callback(result.ioerr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('cloneWordbook failed: unknown result');
};
LextendBaseClient.prototype.updateLearnRecords = function(authToken, records, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateLearnRecords(authToken, records);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateLearnRecords(authToken, records);
  }
};

LextendBaseClient.prototype.send_updateLearnRecords = function(authToken, records) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateLearnRecords', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_updateLearnRecords_args();
  args.authToken = authToken;
  args.records = records;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_updateLearnRecords = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_updateLearnRecords_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerr) {
    return callback(result.ioerr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateLearnRecords failed: unknown result');
};
LextendBaseClient.prototype.updateReadRecords = function(authToken, records, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateReadRecords(authToken, records);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateReadRecords(authToken, records);
  }
};

LextendBaseClient.prototype.send_updateReadRecords = function(authToken, records) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateReadRecords', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_updateReadRecords_args();
  args.authToken = authToken;
  args.records = records;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_updateReadRecords = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_updateReadRecords_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerr) {
    return callback(result.ioerr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateReadRecords failed: unknown result');
};
LextendBaseClient.prototype.getUserVocab = function(authToken, langid, pageToken, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserVocab(authToken, langid, pageToken);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserVocab(authToken, langid, pageToken);
  }
};

LextendBaseClient.prototype.send_getUserVocab = function(authToken, langid, pageToken) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserVocab', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_getUserVocab_args();
  args.authToken = authToken;
  args.langid = langid;
  args.pageToken = pageToken;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_getUserVocab = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_getUserVocab_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerr) {
    return callback(result.ioerr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserVocab failed: unknown result');
};
LextendBaseClient.prototype.getNumLearnedWordByTime = function(authToken, langid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getNumLearnedWordByTime(authToken, langid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getNumLearnedWordByTime(authToken, langid);
  }
};

LextendBaseClient.prototype.send_getNumLearnedWordByTime = function(authToken, langid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getNumLearnedWordByTime', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_getNumLearnedWordByTime_args();
  args.authToken = authToken;
  args.langid = langid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_getNumLearnedWordByTime = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_getNumLearnedWordByTime_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerr) {
    return callback(result.ioerr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNumLearnedWordByTime failed: unknown result');
};
LextendBaseClient.prototype.getSupportedLanguage = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSupportedLanguage();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSupportedLanguage();
  }
};

LextendBaseClient.prototype.send_getSupportedLanguage = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSupportedLanguage', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_getSupportedLanguage_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_getSupportedLanguage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_getSupportedLanguage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerror) {
    return callback(result.ioerror);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSupportedLanguage failed: unknown result');
};
LextendBaseClient.prototype.getSyncState = function(authToken, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSyncState(authToken);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSyncState(authToken);
  }
};

LextendBaseClient.prototype.send_getSyncState = function(authToken) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSyncState', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_getSyncState_args();
  args.authToken = authToken;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_getSyncState = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_getSyncState_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerror) {
    return callback(result.ioerror);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSyncState failed: unknown result');
};
LextendBaseClient.prototype.getSyncChunk = function(authToken, afterUSN, lastUSN, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSyncChunk(authToken, afterUSN, lastUSN);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSyncChunk(authToken, afterUSN, lastUSN);
  }
};

LextendBaseClient.prototype.send_getSyncChunk = function(authToken, afterUSN, lastUSN) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSyncChunk', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendBase_getSyncChunk_args();
  args.authToken = authToken;
  args.afterUSN = afterUSN;
  args.lastUSN = lastUSN;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendBaseClient.prototype.recv_getSyncChunk = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendBase_getSyncChunk_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerror) {
    return callback(result.ioerror);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSyncChunk failed: unknown result');
};
var LextendBaseProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
LextendBaseProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

LextendBaseProcessor.prototype.process_startLearningNewLanguage = function(seqid, input, output) {
  var args = new LextendBase_startLearningNewLanguage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.startLearningNewLanguage.length === 4) {
    Q.fcall(this._handler.startLearningNewLanguage, args.authToken, args.langid, args.vialangid, args.startLevel)
      .then(function(result) {
        var result = new LextendBase_startLearningNewLanguage_result({success: result});
        output.writeMessageBegin("startLearningNewLanguage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_startLearningNewLanguage_result(err);
          output.writeMessageBegin("startLearningNewLanguage", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("startLearningNewLanguage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.startLearningNewLanguage(args.authToken, args.langid, args.vialangid, args.startLevel, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_startLearningNewLanguage_result((err != null ? err : {success: result}));
        output.writeMessageBegin("startLearningNewLanguage", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("startLearningNewLanguage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_updateLearningSetting = function(seqid, input, output) {
  var args = new LextendBase_updateLearningSetting_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateLearningSetting.length === 5) {
    Q.fcall(this._handler.updateLearningSetting, args.authToken, args.langid, args.numWordPerDay, args.numNewWordPerDay, args.level)
      .then(function(result) {
        var result = new LextendBase_updateLearningSetting_result({success: result});
        output.writeMessageBegin("updateLearningSetting", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_updateLearningSetting_result(err);
          output.writeMessageBegin("updateLearningSetting", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateLearningSetting", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateLearningSetting(args.authToken, args.langid, args.numWordPerDay, args.numNewWordPerDay, args.level, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_updateLearningSetting_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateLearningSetting", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateLearningSetting", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_getLearningSettings = function(seqid, input, output) {
  var args = new LextendBase_getLearningSettings_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getLearningSettings.length === 1) {
    Q.fcall(this._handler.getLearningSettings, args.authToken)
      .then(function(result) {
        var result = new LextendBase_getLearningSettings_result({success: result});
        output.writeMessageBegin("getLearningSettings", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_getLearningSettings_result(err);
          output.writeMessageBegin("getLearningSettings", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getLearningSettings", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getLearningSettings(args.authToken, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_getLearningSettings_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getLearningSettings", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getLearningSettings", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_lookup = function(seqid, input, output) {
  var args = new LextendBase_lookup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.lookup.length === 5) {
    Q.fcall(this._handler.lookup, args.authToken, args.fromlangid, args.tolangid, args.word, args.searchExample)
      .then(function(result) {
        var result = new LextendBase_lookup_result({success: result});
        output.writeMessageBegin("lookup", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_lookup_result(err);
          output.writeMessageBegin("lookup", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("lookup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.lookup(args.authToken, args.fromlangid, args.tolangid, args.word, args.searchExample, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_lookup_result((err != null ? err : {success: result}));
        output.writeMessageBegin("lookup", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("lookup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_downloadDictionary = function(seqid, input, output) {
  var args = new LextendBase_downloadDictionary_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.downloadDictionary.length === 5) {
    Q.fcall(this._handler.downloadDictionary, args.authToken, args.fromlangid, args.tolangid, args.fromEntryNum, args.toEntryNum)
      .then(function(result) {
        var result = new LextendBase_downloadDictionary_result({success: result});
        output.writeMessageBegin("downloadDictionary", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_downloadDictionary_result(err);
          output.writeMessageBegin("downloadDictionary", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("downloadDictionary", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.downloadDictionary(args.authToken, args.fromlangid, args.tolangid, args.fromEntryNum, args.toEntryNum, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_downloadDictionary_result((err != null ? err : {success: result}));
        output.writeMessageBegin("downloadDictionary", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("downloadDictionary", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_getLookupSuggestions = function(seqid, input, output) {
  var args = new LextendBase_getLookupSuggestions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getLookupSuggestions.length === 4) {
    Q.fcall(this._handler.getLookupSuggestions, args.authToken, args.fromlangid, args.tolangid, args.charSeq)
      .then(function(result) {
        var result = new LextendBase_getLookupSuggestions_result({success: result});
        output.writeMessageBegin("getLookupSuggestions", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_getLookupSuggestions_result(err);
          output.writeMessageBegin("getLookupSuggestions", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getLookupSuggestions", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getLookupSuggestions(args.authToken, args.fromlangid, args.tolangid, args.charSeq, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_getLookupSuggestions_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getLookupSuggestions", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getLookupSuggestions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_searchExamples = function(seqid, input, output) {
  var args = new LextendBase_searchExamples_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.searchExamples.length === 4) {
    Q.fcall(this._handler.searchExamples, args.authToken, args.fromlangid, args.tolangid, args.word)
      .then(function(result) {
        var result = new LextendBase_searchExamples_result({success: result});
        output.writeMessageBegin("searchExamples", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_searchExamples_result(err);
          output.writeMessageBegin("searchExamples", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("searchExamples", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.searchExamples(args.authToken, args.fromlangid, args.tolangid, args.word, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_searchExamples_result((err != null ? err : {success: result}));
        output.writeMessageBegin("searchExamples", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("searchExamples", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_getTodayWords = function(seqid, input, output) {
  var args = new LextendBase_getTodayWords_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTodayWords.length === 4) {
    Q.fcall(this._handler.getTodayWords, args.authToken, args.langid, args.vialangid, args.timezone)
      .then(function(result) {
        var result = new LextendBase_getTodayWords_result({success: result});
        output.writeMessageBegin("getTodayWords", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_getTodayWords_result(err);
          output.writeMessageBegin("getTodayWords", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getTodayWords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTodayWords(args.authToken, args.langid, args.vialangid, args.timezone, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_getTodayWords_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getTodayWords", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTodayWords", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_updateUserWord = function(seqid, input, output) {
  var args = new LextendBase_updateUserWord_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateUserWord.length === 2) {
    Q.fcall(this._handler.updateUserWord, args.authToken, args.word)
      .then(function(result) {
        var result = new LextendBase_updateUserWord_result({success: result});
        output.writeMessageBegin("updateUserWord", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_updateUserWord_result(err);
          output.writeMessageBegin("updateUserWord", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateUserWord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateUserWord(args.authToken, args.word, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_updateUserWord_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateUserWord", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateUserWord", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_deleteUserWord = function(seqid, input, output) {
  var args = new LextendBase_deleteUserWord_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteUserWord.length === 2) {
    Q.fcall(this._handler.deleteUserWord, args.authToken, args.uri)
      .then(function(result) {
        var result = new LextendBase_deleteUserWord_result({success: result});
        output.writeMessageBegin("deleteUserWord", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_deleteUserWord_result(err);
          output.writeMessageBegin("deleteUserWord", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteUserWord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteUserWord(args.authToken, args.uri, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_deleteUserWord_result((err != null ? err : {success: result}));
        output.writeMessageBegin("deleteUserWord", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteUserWord", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_createUserWord = function(seqid, input, output) {
  var args = new LextendBase_createUserWord_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createUserWord.length === 2) {
    Q.fcall(this._handler.createUserWord, args.authToken, args.word)
      .then(function(result) {
        var result = new LextendBase_createUserWord_result({success: result});
        output.writeMessageBegin("createUserWord", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_createUserWord_result(err);
          output.writeMessageBegin("createUserWord", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createUserWord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createUserWord(args.authToken, args.word, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_createUserWord_result((err != null ? err : {success: result}));
        output.writeMessageBegin("createUserWord", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createUserWord", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_getUserWords = function(seqid, input, output) {
  var args = new LextendBase_getUserWords_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserWords.length === 3) {
    Q.fcall(this._handler.getUserWords, args.authToken, args.langid, args.words)
      .then(function(result) {
        var result = new LextendBase_getUserWords_result({success: result});
        output.writeMessageBegin("getUserWords", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_getUserWords_result(err);
          output.writeMessageBegin("getUserWords", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUserWords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserWords(args.authToken, args.langid, args.words, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_getUserWords_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getUserWords", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUserWords", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_listUserWords = function(seqid, input, output) {
  var args = new LextendBase_listUserWords_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listUserWords.length === 4) {
    Q.fcall(this._handler.listUserWords, args.authToken, args.langid, args.pageToken, args.limit)
      .then(function(result) {
        var result = new LextendBase_listUserWords_result({success: result});
        output.writeMessageBegin("listUserWords", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_listUserWords_result(err);
          output.writeMessageBegin("listUserWords", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("listUserWords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listUserWords(args.authToken, args.langid, args.pageToken, args.limit, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_listUserWords_result((err != null ? err : {success: result}));
        output.writeMessageBegin("listUserWords", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listUserWords", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_updateUserMaterial = function(seqid, input, output) {
  var args = new LextendBase_updateUserMaterial_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateUserMaterial.length === 2) {
    Q.fcall(this._handler.updateUserMaterial, args.authToken, args.material)
      .then(function(result) {
        var result = new LextendBase_updateUserMaterial_result({success: result});
        output.writeMessageBegin("updateUserMaterial", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_updateUserMaterial_result(err);
          output.writeMessageBegin("updateUserMaterial", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateUserMaterial", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateUserMaterial(args.authToken, args.material, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_updateUserMaterial_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateUserMaterial", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateUserMaterial", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_createUserMaterial = function(seqid, input, output) {
  var args = new LextendBase_createUserMaterial_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createUserMaterial.length === 2) {
    Q.fcall(this._handler.createUserMaterial, args.authToken, args.material)
      .then(function(result) {
        var result = new LextendBase_createUserMaterial_result({success: result});
        output.writeMessageBegin("createUserMaterial", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_createUserMaterial_result(err);
          output.writeMessageBegin("createUserMaterial", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createUserMaterial", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createUserMaterial(args.authToken, args.material, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_createUserMaterial_result((err != null ? err : {success: result}));
        output.writeMessageBegin("createUserMaterial", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createUserMaterial", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_listUserMaterials = function(seqid, input, output) {
  var args = new LextendBase_listUserMaterials_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listUserMaterials.length === 5) {
    Q.fcall(this._handler.listUserMaterials, args.authToken, args.langid, args.vialangid, args.pageToken, args.limit)
      .then(function(result) {
        var result = new LextendBase_listUserMaterials_result({success: result});
        output.writeMessageBegin("listUserMaterials", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_listUserMaterials_result(err);
          output.writeMessageBegin("listUserMaterials", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("listUserMaterials", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listUserMaterials(args.authToken, args.langid, args.vialangid, args.pageToken, args.limit, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_listUserMaterials_result((err != null ? err : {success: result}));
        output.writeMessageBegin("listUserMaterials", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listUserMaterials", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_deleteUserMaterial = function(seqid, input, output) {
  var args = new LextendBase_deleteUserMaterial_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteUserMaterial.length === 2) {
    Q.fcall(this._handler.deleteUserMaterial, args.authToken, args.materialUri)
      .then(function(result) {
        var result = new LextendBase_deleteUserMaterial_result({success: result});
        output.writeMessageBegin("deleteUserMaterial", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_deleteUserMaterial_result(err);
          output.writeMessageBegin("deleteUserMaterial", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteUserMaterial", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteUserMaterial(args.authToken, args.materialUri, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_deleteUserMaterial_result((err != null ? err : {success: result}));
        output.writeMessageBegin("deleteUserMaterial", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteUserMaterial", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_listUserFavourites = function(seqid, input, output) {
  var args = new LextendBase_listUserFavourites_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listUserFavourites.length === 5) {
    Q.fcall(this._handler.listUserFavourites, args.authToken, args.langid, args.vialangid, args.pageToken, args.limit)
      .then(function(result) {
        var result = new LextendBase_listUserFavourites_result({success: result});
        output.writeMessageBegin("listUserFavourites", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_listUserFavourites_result(err);
          output.writeMessageBegin("listUserFavourites", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("listUserFavourites", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listUserFavourites(args.authToken, args.langid, args.vialangid, args.pageToken, args.limit, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_listUserFavourites_result((err != null ? err : {success: result}));
        output.writeMessageBegin("listUserFavourites", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listUserFavourites", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_getMaterialSummaries = function(seqid, input, output) {
  var args = new LextendBase_getMaterialSummaries_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getMaterialSummaries.length === 2) {
    Q.fcall(this._handler.getMaterialSummaries, args.authToken, args.uris)
      .then(function(result) {
        var result = new LextendBase_getMaterialSummaries_result({success: result});
        output.writeMessageBegin("getMaterialSummaries", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_getMaterialSummaries_result(err);
          output.writeMessageBegin("getMaterialSummaries", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getMaterialSummaries", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getMaterialSummaries(args.authToken, args.uris, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_getMaterialSummaries_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getMaterialSummaries", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMaterialSummaries", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_getRecommendedMaterials = function(seqid, input, output) {
  var args = new LextendBase_getRecommendedMaterials_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRecommendedMaterials.length === 4) {
    Q.fcall(this._handler.getRecommendedMaterials, args.authToken, args.langid, args.vialangid, args.timezone)
      .then(function(result) {
        var result = new LextendBase_getRecommendedMaterials_result({success: result});
        output.writeMessageBegin("getRecommendedMaterials", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_getRecommendedMaterials_result(err);
          output.writeMessageBegin("getRecommendedMaterials", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRecommendedMaterials", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRecommendedMaterials(args.authToken, args.langid, args.vialangid, args.timezone, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_getRecommendedMaterials_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getRecommendedMaterials", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRecommendedMaterials", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_getMaterialAnnot = function(seqid, input, output) {
  var args = new LextendBase_getMaterialAnnot_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getMaterialAnnot.length === 3) {
    Q.fcall(this._handler.getMaterialAnnot, args.authToken, args.resourceUri, args.contentDigest)
      .then(function(result) {
        var result = new LextendBase_getMaterialAnnot_result({success: result});
        output.writeMessageBegin("getMaterialAnnot", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_getMaterialAnnot_result(err);
          output.writeMessageBegin("getMaterialAnnot", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getMaterialAnnot", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getMaterialAnnot(args.authToken, args.resourceUri, args.contentDigest, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_getMaterialAnnot_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getMaterialAnnot", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMaterialAnnot", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_getMaterial = function(seqid, input, output) {
  var args = new LextendBase_getMaterial_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getMaterial.length === 2) {
    Q.fcall(this._handler.getMaterial, args.authToken, args.resourceUri)
      .then(function(result) {
        var result = new LextendBase_getMaterial_result({success: result});
        output.writeMessageBegin("getMaterial", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_getMaterial_result(err);
          output.writeMessageBegin("getMaterial", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getMaterial", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getMaterial(args.authToken, args.resourceUri, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_getMaterial_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getMaterial", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMaterial", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_addComment = function(seqid, input, output) {
  var args = new LextendBase_addComment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addComment.length === 3) {
    Q.fcall(this._handler.addComment, args.authToken, args.materialUri, args.comment)
      .then(function(result) {
        var result = new LextendBase_addComment_result({success: result});
        output.writeMessageBegin("addComment", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_addComment_result(err);
          output.writeMessageBegin("addComment", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addComment", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addComment(args.authToken, args.materialUri, args.comment, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_addComment_result((err != null ? err : {success: result}));
        output.writeMessageBegin("addComment", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addComment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_editComment = function(seqid, input, output) {
  var args = new LextendBase_editComment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.editComment.length === 3) {
    Q.fcall(this._handler.editComment, args.authToken, args.commentUri, args.newText)
      .then(function(result) {
        var result = new LextendBase_editComment_result({success: result});
        output.writeMessageBegin("editComment", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_editComment_result(err);
          output.writeMessageBegin("editComment", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("editComment", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.editComment(args.authToken, args.commentUri, args.newText, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_editComment_result((err != null ? err : {success: result}));
        output.writeMessageBegin("editComment", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("editComment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_getMaterialComments = function(seqid, input, output) {
  var args = new LextendBase_getMaterialComments_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getMaterialComments.length === 4) {
    Q.fcall(this._handler.getMaterialComments, args.authToken, args.resourceUri, args.pageToken, args.limit)
      .then(function(result) {
        var result = new LextendBase_getMaterialComments_result({success: result});
        output.writeMessageBegin("getMaterialComments", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_getMaterialComments_result(err);
          output.writeMessageBegin("getMaterialComments", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getMaterialComments", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getMaterialComments(args.authToken, args.resourceUri, args.pageToken, args.limit, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_getMaterialComments_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getMaterialComments", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMaterialComments", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_likeMaterial = function(seqid, input, output) {
  var args = new LextendBase_likeMaterial_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.likeMaterial.length === 2) {
    Q.fcall(this._handler.likeMaterial, args.authToken, args.resourceUri)
      .then(function(result) {
        var result = new LextendBase_likeMaterial_result({success: result});
        output.writeMessageBegin("likeMaterial", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_likeMaterial_result(err);
          output.writeMessageBegin("likeMaterial", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("likeMaterial", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.likeMaterial(args.authToken, args.resourceUri, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_likeMaterial_result((err != null ? err : {success: result}));
        output.writeMessageBegin("likeMaterial", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("likeMaterial", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_getMaterialFeedbackStats = function(seqid, input, output) {
  var args = new LextendBase_getMaterialFeedbackStats_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getMaterialFeedbackStats.length === 2) {
    Q.fcall(this._handler.getMaterialFeedbackStats, args.authToken, args.materialUris)
      .then(function(result) {
        var result = new LextendBase_getMaterialFeedbackStats_result({success: result});
        output.writeMessageBegin("getMaterialFeedbackStats", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_getMaterialFeedbackStats_result(err);
          output.writeMessageBegin("getMaterialFeedbackStats", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getMaterialFeedbackStats", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getMaterialFeedbackStats(args.authToken, args.materialUris, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_getMaterialFeedbackStats_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getMaterialFeedbackStats", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMaterialFeedbackStats", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_updateUserWordbook = function(seqid, input, output) {
  var args = new LextendBase_updateUserWordbook_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateUserWordbook.length === 2) {
    Q.fcall(this._handler.updateUserWordbook, args.authToken, args.wordbook)
      .then(function(result) {
        var result = new LextendBase_updateUserWordbook_result({success: result});
        output.writeMessageBegin("updateUserWordbook", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_updateUserWordbook_result(err);
          output.writeMessageBegin("updateUserWordbook", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateUserWordbook", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateUserWordbook(args.authToken, args.wordbook, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_updateUserWordbook_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateUserWordbook", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateUserWordbook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_createUserWordbook = function(seqid, input, output) {
  var args = new LextendBase_createUserWordbook_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createUserWordbook.length === 2) {
    Q.fcall(this._handler.createUserWordbook, args.authToken, args.wordbook)
      .then(function(result) {
        var result = new LextendBase_createUserWordbook_result({success: result});
        output.writeMessageBegin("createUserWordbook", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_createUserWordbook_result(err);
          output.writeMessageBegin("createUserWordbook", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createUserWordbook", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createUserWordbook(args.authToken, args.wordbook, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_createUserWordbook_result((err != null ? err : {success: result}));
        output.writeMessageBegin("createUserWordbook", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createUserWordbook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_listUserWordbook = function(seqid, input, output) {
  var args = new LextendBase_listUserWordbook_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listUserWordbook.length === 4) {
    Q.fcall(this._handler.listUserWordbook, args.authToken, args.langid, args.pageToken, args.limit)
      .then(function(result) {
        var result = new LextendBase_listUserWordbook_result({success: result});
        output.writeMessageBegin("listUserWordbook", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_listUserWordbook_result(err);
          output.writeMessageBegin("listUserWordbook", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("listUserWordbook", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listUserWordbook(args.authToken, args.langid, args.pageToken, args.limit, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_listUserWordbook_result((err != null ? err : {success: result}));
        output.writeMessageBegin("listUserWordbook", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listUserWordbook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_getWordbook = function(seqid, input, output) {
  var args = new LextendBase_getWordbook_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getWordbook.length === 2) {
    Q.fcall(this._handler.getWordbook, args.authToken, args.uri)
      .then(function(result) {
        var result = new LextendBase_getWordbook_result({success: result});
        output.writeMessageBegin("getWordbook", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_getWordbook_result(err);
          output.writeMessageBegin("getWordbook", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getWordbook", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getWordbook(args.authToken, args.uri, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_getWordbook_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getWordbook", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getWordbook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_deleteUserWordbook = function(seqid, input, output) {
  var args = new LextendBase_deleteUserWordbook_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteUserWordbook.length === 2) {
    Q.fcall(this._handler.deleteUserWordbook, args.authToken, args.uri)
      .then(function(result) {
        var result = new LextendBase_deleteUserWordbook_result({success: result});
        output.writeMessageBegin("deleteUserWordbook", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_deleteUserWordbook_result(err);
          output.writeMessageBegin("deleteUserWordbook", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteUserWordbook", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteUserWordbook(args.authToken, args.uri, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_deleteUserWordbook_result((err != null ? err : {success: result}));
        output.writeMessageBegin("deleteUserWordbook", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteUserWordbook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_getRecommendedWordbooks = function(seqid, input, output) {
  var args = new LextendBase_getRecommendedWordbooks_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRecommendedWordbooks.length === 4) {
    Q.fcall(this._handler.getRecommendedWordbooks, args.authToken, args.langid, args.pageToken, args.limit)
      .then(function(result) {
        var result = new LextendBase_getRecommendedWordbooks_result({success: result});
        output.writeMessageBegin("getRecommendedWordbooks", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_getRecommendedWordbooks_result(err);
          output.writeMessageBegin("getRecommendedWordbooks", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRecommendedWordbooks", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRecommendedWordbooks(args.authToken, args.langid, args.pageToken, args.limit, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_getRecommendedWordbooks_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getRecommendedWordbooks", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRecommendedWordbooks", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_cloneWordbook = function(seqid, input, output) {
  var args = new LextendBase_cloneWordbook_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.cloneWordbook.length === 2) {
    Q.fcall(this._handler.cloneWordbook, args.authToken, args.wordbookUri)
      .then(function(result) {
        var result = new LextendBase_cloneWordbook_result({success: result});
        output.writeMessageBegin("cloneWordbook", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_cloneWordbook_result(err);
          output.writeMessageBegin("cloneWordbook", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("cloneWordbook", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.cloneWordbook(args.authToken, args.wordbookUri, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_cloneWordbook_result((err != null ? err : {success: result}));
        output.writeMessageBegin("cloneWordbook", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("cloneWordbook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_updateLearnRecords = function(seqid, input, output) {
  var args = new LextendBase_updateLearnRecords_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateLearnRecords.length === 2) {
    Q.fcall(this._handler.updateLearnRecords, args.authToken, args.records)
      .then(function(result) {
        var result = new LextendBase_updateLearnRecords_result({success: result});
        output.writeMessageBegin("updateLearnRecords", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_updateLearnRecords_result(err);
          output.writeMessageBegin("updateLearnRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateLearnRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateLearnRecords(args.authToken, args.records, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_updateLearnRecords_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateLearnRecords", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateLearnRecords", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_updateReadRecords = function(seqid, input, output) {
  var args = new LextendBase_updateReadRecords_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateReadRecords.length === 2) {
    Q.fcall(this._handler.updateReadRecords, args.authToken, args.records)
      .then(function(result) {
        var result = new LextendBase_updateReadRecords_result({success: result});
        output.writeMessageBegin("updateReadRecords", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_updateReadRecords_result(err);
          output.writeMessageBegin("updateReadRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateReadRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateReadRecords(args.authToken, args.records, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_updateReadRecords_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateReadRecords", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateReadRecords", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_getUserVocab = function(seqid, input, output) {
  var args = new LextendBase_getUserVocab_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserVocab.length === 3) {
    Q.fcall(this._handler.getUserVocab, args.authToken, args.langid, args.pageToken)
      .then(function(result) {
        var result = new LextendBase_getUserVocab_result({success: result});
        output.writeMessageBegin("getUserVocab", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_getUserVocab_result(err);
          output.writeMessageBegin("getUserVocab", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUserVocab", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserVocab(args.authToken, args.langid, args.pageToken, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_getUserVocab_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getUserVocab", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUserVocab", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_getNumLearnedWordByTime = function(seqid, input, output) {
  var args = new LextendBase_getNumLearnedWordByTime_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getNumLearnedWordByTime.length === 2) {
    Q.fcall(this._handler.getNumLearnedWordByTime, args.authToken, args.langid)
      .then(function(result) {
        var result = new LextendBase_getNumLearnedWordByTime_result({success: result});
        output.writeMessageBegin("getNumLearnedWordByTime", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_getNumLearnedWordByTime_result(err);
          output.writeMessageBegin("getNumLearnedWordByTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getNumLearnedWordByTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getNumLearnedWordByTime(args.authToken, args.langid, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_getNumLearnedWordByTime_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getNumLearnedWordByTime", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNumLearnedWordByTime", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_getSupportedLanguage = function(seqid, input, output) {
  var args = new LextendBase_getSupportedLanguage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSupportedLanguage.length === 0) {
    Q.fcall(this._handler.getSupportedLanguage)
      .then(function(result) {
        var result = new LextendBase_getSupportedLanguage_result({success: result});
        output.writeMessageBegin("getSupportedLanguage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_getSupportedLanguage_result(err);
          output.writeMessageBegin("getSupportedLanguage", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSupportedLanguage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSupportedLanguage(function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_getSupportedLanguage_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getSupportedLanguage", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSupportedLanguage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_getSyncState = function(seqid, input, output) {
  var args = new LextendBase_getSyncState_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSyncState.length === 1) {
    Q.fcall(this._handler.getSyncState, args.authToken)
      .then(function(result) {
        var result = new LextendBase_getSyncState_result({success: result});
        output.writeMessageBegin("getSyncState", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_getSyncState_result(err);
          output.writeMessageBegin("getSyncState", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSyncState", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSyncState(args.authToken, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_getSyncState_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getSyncState", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSyncState", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendBaseProcessor.prototype.process_getSyncChunk = function(seqid, input, output) {
  var args = new LextendBase_getSyncChunk_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSyncChunk.length === 3) {
    Q.fcall(this._handler.getSyncChunk, args.authToken, args.afterUSN, args.lastUSN)
      .then(function(result) {
        var result = new LextendBase_getSyncChunk_result({success: result});
        output.writeMessageBegin("getSyncChunk", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendBase_getSyncChunk_result(err);
          output.writeMessageBegin("getSyncChunk", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSyncChunk", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSyncChunk(args.authToken, args.afterUSN, args.lastUSN, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendBase_getSyncChunk_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getSyncChunk", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSyncChunk", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

