//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.AnnotType = {
  'PARA_LANG' : 1,
  'SENT_TOKEN' : 2,
  'WORD_TOKEN' : 3
};
var Annotation = module.exports.Annotation = function(args) {
  this.startPos = null;
  this.endPos = null;
  this.annotation = null;
  this.extras = null;
  if (args) {
    if (args.startPos !== undefined && args.startPos !== null) {
      this.startPos = args.startPos;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startPos is unset!');
    }
    if (args.endPos !== undefined && args.endPos !== null) {
      this.endPos = args.endPos;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field endPos is unset!');
    }
    if (args.annotation !== undefined && args.annotation !== null) {
      this.annotation = args.annotation;
    }
    if (args.extras !== undefined && args.extras !== null) {
      this.extras = Thrift.copyMap(args.extras, [null]);
    }
  }
};
Annotation.prototype = {};
Annotation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.startPos = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.endPos = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.annotation = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.extras = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.extras[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Annotation.prototype.write = function(output) {
  output.writeStructBegin('Annotation');
  if (this.startPos !== null && this.startPos !== undefined) {
    output.writeFieldBegin('startPos', Thrift.Type.I32, 1);
    output.writeI32(this.startPos);
    output.writeFieldEnd();
  }
  if (this.endPos !== null && this.endPos !== undefined) {
    output.writeFieldBegin('endPos', Thrift.Type.I32, 2);
    output.writeI32(this.endPos);
    output.writeFieldEnd();
  }
  if (this.annotation !== null && this.annotation !== undefined) {
    output.writeFieldBegin('annotation', Thrift.Type.STRING, 3);
    output.writeString(this.annotation);
    output.writeFieldEnd();
  }
  if (this.extras !== null && this.extras !== undefined) {
    output.writeFieldBegin('extras', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extras));
    for (var kiter8 in this.extras)
    {
      if (this.extras.hasOwnProperty(kiter8))
      {
        var viter9 = this.extras[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AnnotationSequence = module.exports.AnnotationSequence = function(args) {
  this.annotType = null;
  this.annotations = null;
  this.extras = null;
  if (args) {
    if (args.annotType !== undefined && args.annotType !== null) {
      this.annotType = args.annotType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field annotType is unset!');
    }
    if (args.annotations !== undefined && args.annotations !== null) {
      this.annotations = Thrift.copyList(args.annotations, [ttypes.Annotation]);
    }
    if (args.extras !== undefined && args.extras !== null) {
      this.extras = Thrift.copyMap(args.extras, [null]);
    }
  }
};
AnnotationSequence.prototype = {};
AnnotationSequence.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.annotType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size10 = 0;
        var _rtmp314;
        this.annotations = [];
        var _etype13 = 0;
        _rtmp314 = input.readListBegin();
        _etype13 = _rtmp314.etype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var elem16 = null;
          elem16 = new ttypes.Annotation();
          elem16.read(input);
          this.annotations.push(elem16);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size17 = 0;
        var _rtmp321;
        this.extras = {};
        var _ktype18 = 0;
        var _vtype19 = 0;
        _rtmp321 = input.readMapBegin();
        _ktype18 = _rtmp321.ktype;
        _vtype19 = _rtmp321.vtype;
        _size17 = _rtmp321.size;
        for (var _i22 = 0; _i22 < _size17; ++_i22)
        {
          var key23 = null;
          var val24 = null;
          key23 = input.readString();
          val24 = input.readString();
          this.extras[key23] = val24;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnnotationSequence.prototype.write = function(output) {
  output.writeStructBegin('AnnotationSequence');
  if (this.annotType !== null && this.annotType !== undefined) {
    output.writeFieldBegin('annotType', Thrift.Type.I32, 1);
    output.writeI32(this.annotType);
    output.writeFieldEnd();
  }
  if (this.annotations !== null && this.annotations !== undefined) {
    output.writeFieldBegin('annotations', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.annotations.length);
    for (var iter25 in this.annotations)
    {
      if (this.annotations.hasOwnProperty(iter25))
      {
        iter25 = this.annotations[iter25];
        iter25.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.extras !== null && this.extras !== undefined) {
    output.writeFieldBegin('extras', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extras));
    for (var kiter26 in this.extras)
    {
      if (this.extras.hasOwnProperty(kiter26))
      {
        var viter27 = this.extras[kiter26];
        output.writeString(kiter26);
        output.writeString(viter27);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

