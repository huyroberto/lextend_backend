//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var auth_ttypes = require('./auth_types');
var learning_ttypes = require('./learning_types');
var common_ttypes = require('./common_types');
var annot_ttypes = require('./annot_types');
var media_ttypes = require('./media_types');


var ttypes = module.exports = {};
var LanguagePair = module.exports.LanguagePair = function(args) {
  this.langid = null;
  this.vialangid = null;
  if (args) {
    if (args.langid !== undefined && args.langid !== null) {
      this.langid = args.langid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field langid is unset!');
    }
    if (args.vialangid !== undefined && args.vialangid !== null) {
      this.vialangid = args.vialangid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field vialangid is unset!');
    }
  }
};
LanguagePair.prototype = {};
LanguagePair.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.langid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.vialangid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LanguagePair.prototype.write = function(output) {
  output.writeStructBegin('LanguagePair');
  if (this.langid !== null && this.langid !== undefined) {
    output.writeFieldBegin('langid', Thrift.Type.STRING, 1);
    output.writeString(this.langid);
    output.writeFieldEnd();
  }
  if (this.vialangid !== null && this.vialangid !== undefined) {
    output.writeFieldBegin('vialangid', Thrift.Type.STRING, 2);
    output.writeString(this.vialangid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Language = module.exports.Language = function(args) {
  this.langMap = null;
  this.languagePairs = null;
  if (args) {
    if (args.langMap !== undefined && args.langMap !== null) {
      this.langMap = Thrift.copyMap(args.langMap, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field langMap is unset!');
    }
    if (args.languagePairs !== undefined && args.languagePairs !== null) {
      this.languagePairs = Thrift.copyList(args.languagePairs, [ttypes.LanguagePair]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field languagePairs is unset!');
    }
  }
};
Language.prototype = {};
Language.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.langMap = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.langMap[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.languagePairs = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.LanguagePair();
          elem14.read(input);
          this.languagePairs.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Language.prototype.write = function(output) {
  output.writeStructBegin('Language');
  if (this.langMap !== null && this.langMap !== undefined) {
    output.writeFieldBegin('langMap', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.langMap));
    for (var kiter15 in this.langMap)
    {
      if (this.langMap.hasOwnProperty(kiter15))
      {
        var viter16 = this.langMap[kiter15];
        output.writeString(kiter15);
        output.writeString(viter16);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.languagePairs !== null && this.languagePairs !== undefined) {
    output.writeFieldBegin('languagePairs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.languagePairs.length);
    for (var iter17 in this.languagePairs)
    {
      if (this.languagePairs.hasOwnProperty(iter17))
      {
        iter17 = this.languagePairs[iter17];
        iter17.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PronunciationWrapper = module.exports.PronunciationWrapper = function(args) {
  this.accentName = null;
  this.audioUri = null;
  this.pronText = null;
  if (args) {
    if (args.accentName !== undefined && args.accentName !== null) {
      this.accentName = args.accentName;
    }
    if (args.audioUri !== undefined && args.audioUri !== null) {
      this.audioUri = args.audioUri;
    }
    if (args.pronText !== undefined && args.pronText !== null) {
      this.pronText = args.pronText;
    }
  }
};
PronunciationWrapper.prototype = {};
PronunciationWrapper.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.accentName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.audioUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pronText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PronunciationWrapper.prototype.write = function(output) {
  output.writeStructBegin('PronunciationWrapper');
  if (this.accentName !== null && this.accentName !== undefined) {
    output.writeFieldBegin('accentName', Thrift.Type.STRING, 1);
    output.writeString(this.accentName);
    output.writeFieldEnd();
  }
  if (this.audioUri !== null && this.audioUri !== undefined) {
    output.writeFieldBegin('audioUri', Thrift.Type.STRING, 2);
    output.writeString(this.audioUri);
    output.writeFieldEnd();
  }
  if (this.pronText !== null && this.pronText !== undefined) {
    output.writeFieldBegin('pronText', Thrift.Type.STRING, 3);
    output.writeString(this.pronText);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WordWrapper = module.exports.WordWrapper = function(args) {
  this.word = null;
  this.definitions = null;
  this.pronid2Pron = null;
  this.picUri = null;
  this.examples = null;
  this.extras = null;
  this.username2defi = null;
  this.username2audioUri = null;
  this.username2picUri = null;
  if (args) {
    if (args.word !== undefined && args.word !== null) {
      this.word = args.word;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field word is unset!');
    }
    if (args.definitions !== undefined && args.definitions !== null) {
      this.definitions = Thrift.copyList(args.definitions, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field definitions is unset!');
    }
    if (args.pronid2Pron !== undefined && args.pronid2Pron !== null) {
      this.pronid2Pron = Thrift.copyMap(args.pronid2Pron, [ttypes.PronunciationWrapper]);
    }
    if (args.picUri !== undefined && args.picUri !== null) {
      this.picUri = args.picUri;
    }
    if (args.examples !== undefined && args.examples !== null) {
      this.examples = Thrift.copyList(args.examples, [learning_ttypes.BilingualSentence]);
    }
    if (args.extras !== undefined && args.extras !== null) {
      this.extras = Thrift.copyMap(args.extras, [null]);
    }
    if (args.username2defi !== undefined && args.username2defi !== null) {
      this.username2defi = Thrift.copyMap(args.username2defi, [null]);
    }
    if (args.username2audioUri !== undefined && args.username2audioUri !== null) {
      this.username2audioUri = Thrift.copyMap(args.username2audioUri, [null]);
    }
    if (args.username2picUri !== undefined && args.username2picUri !== null) {
      this.username2picUri = Thrift.copyMap(args.username2picUri, [null]);
    }
  }
};
WordWrapper.prototype = {};
WordWrapper.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.word = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size18 = 0;
        var _rtmp322;
        this.definitions = [];
        var _etype21 = 0;
        _rtmp322 = input.readListBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = input.readString();
          this.definitions.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size25 = 0;
        var _rtmp329;
        this.pronid2Pron = {};
        var _ktype26 = 0;
        var _vtype27 = 0;
        _rtmp329 = input.readMapBegin();
        _ktype26 = _rtmp329.ktype;
        _vtype27 = _rtmp329.vtype;
        _size25 = _rtmp329.size;
        for (var _i30 = 0; _i30 < _size25; ++_i30)
        {
          var key31 = null;
          var val32 = null;
          key31 = input.readI32();
          val32 = new ttypes.PronunciationWrapper();
          val32.read(input);
          this.pronid2Pron[key31] = val32;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.picUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size33 = 0;
        var _rtmp337;
        this.examples = [];
        var _etype36 = 0;
        _rtmp337 = input.readListBegin();
        _etype36 = _rtmp337.etype;
        _size33 = _rtmp337.size;
        for (var _i38 = 0; _i38 < _size33; ++_i38)
        {
          var elem39 = null;
          elem39 = new learning_ttypes.BilingualSentence();
          elem39.read(input);
          this.examples.push(elem39);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size40 = 0;
        var _rtmp344;
        this.extras = {};
        var _ktype41 = 0;
        var _vtype42 = 0;
        _rtmp344 = input.readMapBegin();
        _ktype41 = _rtmp344.ktype;
        _vtype42 = _rtmp344.vtype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var key46 = null;
          var val47 = null;
          key46 = input.readString();
          val47 = input.readString();
          this.extras[key46] = val47;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size48 = 0;
        var _rtmp352;
        this.username2defi = {};
        var _ktype49 = 0;
        var _vtype50 = 0;
        _rtmp352 = input.readMapBegin();
        _ktype49 = _rtmp352.ktype;
        _vtype50 = _rtmp352.vtype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var key54 = null;
          var val55 = null;
          key54 = input.readString();
          val55 = input.readString();
          this.username2defi[key54] = val55;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.MAP) {
        var _size56 = 0;
        var _rtmp360;
        this.username2audioUri = {};
        var _ktype57 = 0;
        var _vtype58 = 0;
        _rtmp360 = input.readMapBegin();
        _ktype57 = _rtmp360.ktype;
        _vtype58 = _rtmp360.vtype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var key62 = null;
          var val63 = null;
          key62 = input.readString();
          val63 = input.readString();
          this.username2audioUri[key62] = val63;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        var _size64 = 0;
        var _rtmp368;
        this.username2picUri = {};
        var _ktype65 = 0;
        var _vtype66 = 0;
        _rtmp368 = input.readMapBegin();
        _ktype65 = _rtmp368.ktype;
        _vtype66 = _rtmp368.vtype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var key70 = null;
          var val71 = null;
          key70 = input.readString();
          val71 = input.readString();
          this.username2picUri[key70] = val71;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WordWrapper.prototype.write = function(output) {
  output.writeStructBegin('WordWrapper');
  if (this.word !== null && this.word !== undefined) {
    output.writeFieldBegin('word', Thrift.Type.STRING, 1);
    output.writeString(this.word);
    output.writeFieldEnd();
  }
  if (this.definitions !== null && this.definitions !== undefined) {
    output.writeFieldBegin('definitions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.definitions.length);
    for (var iter72 in this.definitions)
    {
      if (this.definitions.hasOwnProperty(iter72))
      {
        iter72 = this.definitions[iter72];
        output.writeString(iter72);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pronid2Pron !== null && this.pronid2Pron !== undefined) {
    output.writeFieldBegin('pronid2Pron', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRUCT, Thrift.objectLength(this.pronid2Pron));
    for (var kiter73 in this.pronid2Pron)
    {
      if (this.pronid2Pron.hasOwnProperty(kiter73))
      {
        var viter74 = this.pronid2Pron[kiter73];
        output.writeI32(kiter73);
        viter74.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.picUri !== null && this.picUri !== undefined) {
    output.writeFieldBegin('picUri', Thrift.Type.STRING, 4);
    output.writeString(this.picUri);
    output.writeFieldEnd();
  }
  if (this.examples !== null && this.examples !== undefined) {
    output.writeFieldBegin('examples', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.examples.length);
    for (var iter75 in this.examples)
    {
      if (this.examples.hasOwnProperty(iter75))
      {
        iter75 = this.examples[iter75];
        iter75.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.extras !== null && this.extras !== undefined) {
    output.writeFieldBegin('extras', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extras));
    for (var kiter76 in this.extras)
    {
      if (this.extras.hasOwnProperty(kiter76))
      {
        var viter77 = this.extras[kiter76];
        output.writeString(kiter76);
        output.writeString(viter77);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.username2defi !== null && this.username2defi !== undefined) {
    output.writeFieldBegin('username2defi', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.username2defi));
    for (var kiter78 in this.username2defi)
    {
      if (this.username2defi.hasOwnProperty(kiter78))
      {
        var viter79 = this.username2defi[kiter78];
        output.writeString(kiter78);
        output.writeString(viter79);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.username2audioUri !== null && this.username2audioUri !== undefined) {
    output.writeFieldBegin('username2audioUri', Thrift.Type.MAP, 8);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.username2audioUri));
    for (var kiter80 in this.username2audioUri)
    {
      if (this.username2audioUri.hasOwnProperty(kiter80))
      {
        var viter81 = this.username2audioUri[kiter80];
        output.writeString(kiter80);
        output.writeString(viter81);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.username2picUri !== null && this.username2picUri !== undefined) {
    output.writeFieldBegin('username2picUri', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.username2picUri));
    for (var kiter82 in this.username2picUri)
    {
      if (this.username2picUri.hasOwnProperty(kiter82))
      {
        var viter83 = this.username2picUri[kiter82];
        output.writeString(kiter82);
        output.writeString(viter83);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WordWrapperList = module.exports.WordWrapperList = function(args) {
  this.wordList = null;
  if (args) {
    if (args.wordList !== undefined && args.wordList !== null) {
      this.wordList = Thrift.copyList(args.wordList, [ttypes.WordWrapper]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field wordList is unset!');
    }
  }
};
WordWrapperList.prototype = {};
WordWrapperList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size84 = 0;
        var _rtmp388;
        this.wordList = [];
        var _etype87 = 0;
        _rtmp388 = input.readListBegin();
        _etype87 = _rtmp388.etype;
        _size84 = _rtmp388.size;
        for (var _i89 = 0; _i89 < _size84; ++_i89)
        {
          var elem90 = null;
          elem90 = new ttypes.WordWrapper();
          elem90.read(input);
          this.wordList.push(elem90);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WordWrapperList.prototype.write = function(output) {
  output.writeStructBegin('WordWrapperList');
  if (this.wordList !== null && this.wordList !== undefined) {
    output.writeFieldBegin('wordList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.wordList.length);
    for (var iter91 in this.wordList)
    {
      if (this.wordList.hasOwnProperty(iter91))
      {
        iter91 = this.wordList[iter91];
        iter91.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MaterialWrapper = module.exports.MaterialWrapper = function(args) {
  this.materialUri = null;
  this.material = null;
  this.annot = null;
  this.numLikes = null;
  this.numComments = null;
  this.userLiked = null;
  this.readStatus = null;
  if (args) {
    if (args.materialUri !== undefined && args.materialUri !== null) {
      this.materialUri = args.materialUri;
    }
    if (args.material !== undefined && args.material !== null) {
      this.material = new learning_ttypes.Material(args.material);
    }
    if (args.annot !== undefined && args.annot !== null) {
      this.annot = new learning_ttypes.MaterialAnnot(args.annot);
    }
    if (args.numLikes !== undefined && args.numLikes !== null) {
      this.numLikes = args.numLikes;
    }
    if (args.numComments !== undefined && args.numComments !== null) {
      this.numComments = args.numComments;
    }
    if (args.userLiked !== undefined && args.userLiked !== null) {
      this.userLiked = args.userLiked;
    }
    if (args.readStatus !== undefined && args.readStatus !== null) {
      this.readStatus = args.readStatus;
    }
  }
};
MaterialWrapper.prototype = {};
MaterialWrapper.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.materialUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.material = new learning_ttypes.Material();
        this.material.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.annot = new learning_ttypes.MaterialAnnot();
        this.annot.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.numLikes = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.numComments = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.userLiked = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.readStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MaterialWrapper.prototype.write = function(output) {
  output.writeStructBegin('MaterialWrapper');
  if (this.materialUri !== null && this.materialUri !== undefined) {
    output.writeFieldBegin('materialUri', Thrift.Type.STRING, 1);
    output.writeString(this.materialUri);
    output.writeFieldEnd();
  }
  if (this.material !== null && this.material !== undefined) {
    output.writeFieldBegin('material', Thrift.Type.STRUCT, 2);
    this.material.write(output);
    output.writeFieldEnd();
  }
  if (this.annot !== null && this.annot !== undefined) {
    output.writeFieldBegin('annot', Thrift.Type.STRUCT, 3);
    this.annot.write(output);
    output.writeFieldEnd();
  }
  if (this.numLikes !== null && this.numLikes !== undefined) {
    output.writeFieldBegin('numLikes', Thrift.Type.I32, 4);
    output.writeI32(this.numLikes);
    output.writeFieldEnd();
  }
  if (this.numComments !== null && this.numComments !== undefined) {
    output.writeFieldBegin('numComments', Thrift.Type.I32, 5);
    output.writeI32(this.numComments);
    output.writeFieldEnd();
  }
  if (this.userLiked !== null && this.userLiked !== undefined) {
    output.writeFieldBegin('userLiked', Thrift.Type.BOOL, 6);
    output.writeBool(this.userLiked);
    output.writeFieldEnd();
  }
  if (this.readStatus !== null && this.readStatus !== undefined) {
    output.writeFieldBegin('readStatus', Thrift.Type.I32, 7);
    output.writeI32(this.readStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Statistic = module.exports.Statistic = function(args) {
  this.dateToStatistic = null;
  if (args) {
    if (args.dateToStatistic !== undefined && args.dateToStatistic !== null) {
      this.dateToStatistic = Thrift.copyMap(args.dateToStatistic, [null]);
    }
  }
};
Statistic.prototype = {};
Statistic.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size92 = 0;
        var _rtmp396;
        this.dateToStatistic = {};
        var _ktype93 = 0;
        var _vtype94 = 0;
        _rtmp396 = input.readMapBegin();
        _ktype93 = _rtmp396.ktype;
        _vtype94 = _rtmp396.vtype;
        _size92 = _rtmp396.size;
        for (var _i97 = 0; _i97 < _size92; ++_i97)
        {
          var key98 = null;
          var val99 = null;
          key98 = input.readString();
          val99 = input.readI32();
          this.dateToStatistic[key98] = val99;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Statistic.prototype.write = function(output) {
  output.writeStructBegin('Statistic');
  if (this.dateToStatistic !== null && this.dateToStatistic !== undefined) {
    output.writeFieldBegin('dateToStatistic', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.dateToStatistic));
    for (var kiter100 in this.dateToStatistic)
    {
      if (this.dateToStatistic.hasOwnProperty(kiter100))
      {
        var viter101 = this.dateToStatistic[kiter100];
        output.writeString(kiter100);
        output.writeI32(viter101);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserVocab = module.exports.UserVocab = function(args) {
  this.langid = null;
  this.words = null;
  this.pageToken = null;
  if (args) {
    if (args.langid !== undefined && args.langid !== null) {
      this.langid = args.langid;
    }
    if (args.words !== undefined && args.words !== null) {
      this.words = Thrift.copyMap(args.words, [null]);
    }
    if (args.pageToken !== undefined && args.pageToken !== null) {
      this.pageToken = args.pageToken;
    }
  }
};
UserVocab.prototype = {};
UserVocab.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.langid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size102 = 0;
        var _rtmp3106;
        this.words = {};
        var _ktype103 = 0;
        var _vtype104 = 0;
        _rtmp3106 = input.readMapBegin();
        _ktype103 = _rtmp3106.ktype;
        _vtype104 = _rtmp3106.vtype;
        _size102 = _rtmp3106.size;
        for (var _i107 = 0; _i107 < _size102; ++_i107)
        {
          var key108 = null;
          var val109 = null;
          key108 = input.readString();
          val109 = input.readDouble();
          this.words[key108] = val109;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.pageToken = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserVocab.prototype.write = function(output) {
  output.writeStructBegin('UserVocab');
  if (this.langid !== null && this.langid !== undefined) {
    output.writeFieldBegin('langid', Thrift.Type.STRING, 1);
    output.writeString(this.langid);
    output.writeFieldEnd();
  }
  if (this.words !== null && this.words !== undefined) {
    output.writeFieldBegin('words', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.DOUBLE, Thrift.objectLength(this.words));
    for (var kiter110 in this.words)
    {
      if (this.words.hasOwnProperty(kiter110))
      {
        var viter111 = this.words[kiter110];
        output.writeString(kiter110);
        output.writeDouble(viter111);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.pageToken !== null && this.pageToken !== undefined) {
    output.writeFieldBegin('pageToken', Thrift.Type.I64, 3);
    output.writeI64(this.pageToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserWordList = module.exports.UserWordList = function(args) {
  this.userwords = null;
  this.pageToken = null;
  if (args) {
    if (args.userwords !== undefined && args.userwords !== null) {
      this.userwords = Thrift.copyList(args.userwords, [learning_ttypes.UserWord]);
    }
    if (args.pageToken !== undefined && args.pageToken !== null) {
      this.pageToken = args.pageToken;
    }
  }
};
UserWordList.prototype = {};
UserWordList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.userwords = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = new learning_ttypes.UserWord();
          elem118.read(input);
          this.userwords.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.pageToken = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserWordList.prototype.write = function(output) {
  output.writeStructBegin('UserWordList');
  if (this.userwords !== null && this.userwords !== undefined) {
    output.writeFieldBegin('userwords', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.userwords.length);
    for (var iter119 in this.userwords)
    {
      if (this.userwords.hasOwnProperty(iter119))
      {
        iter119 = this.userwords[iter119];
        iter119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pageToken !== null && this.pageToken !== undefined) {
    output.writeFieldBegin('pageToken', Thrift.Type.I64, 2);
    output.writeI64(this.pageToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CommentList = module.exports.CommentList = function(args) {
  this.resourceUri = null;
  this.pageToken = null;
  this.selectedComments = null;
  if (args) {
    if (args.resourceUri !== undefined && args.resourceUri !== null) {
      this.resourceUri = args.resourceUri;
    }
    if (args.pageToken !== undefined && args.pageToken !== null) {
      this.pageToken = args.pageToken;
    }
    if (args.selectedComments !== undefined && args.selectedComments !== null) {
      this.selectedComments = Thrift.copyList(args.selectedComments, [learning_ttypes.Comment]);
    }
  }
};
CommentList.prototype = {};
CommentList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.resourceUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.pageToken = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.selectedComments = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = new learning_ttypes.Comment();
          elem126.read(input);
          this.selectedComments.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommentList.prototype.write = function(output) {
  output.writeStructBegin('CommentList');
  if (this.resourceUri !== null && this.resourceUri !== undefined) {
    output.writeFieldBegin('resourceUri', Thrift.Type.STRING, 1);
    output.writeString(this.resourceUri);
    output.writeFieldEnd();
  }
  if (this.pageToken !== null && this.pageToken !== undefined) {
    output.writeFieldBegin('pageToken', Thrift.Type.I64, 2);
    output.writeI64(this.pageToken);
    output.writeFieldEnd();
  }
  if (this.selectedComments !== null && this.selectedComments !== undefined) {
    output.writeFieldBegin('selectedComments', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.selectedComments.length);
    for (var iter127 in this.selectedComments)
    {
      if (this.selectedComments.hasOwnProperty(iter127))
      {
        iter127 = this.selectedComments[iter127];
        iter127.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WordbookList = module.exports.WordbookList = function(args) {
  this.wordbooks = null;
  this.pageToken = null;
  if (args) {
    if (args.wordbooks !== undefined && args.wordbooks !== null) {
      this.wordbooks = Thrift.copyList(args.wordbooks, [learning_ttypes.WordbookSummary]);
    }
    if (args.pageToken !== undefined && args.pageToken !== null) {
      this.pageToken = args.pageToken;
    }
  }
};
WordbookList.prototype = {};
WordbookList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size128 = 0;
        var _rtmp3132;
        this.wordbooks = [];
        var _etype131 = 0;
        _rtmp3132 = input.readListBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          elem134 = new learning_ttypes.WordbookSummary();
          elem134.read(input);
          this.wordbooks.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.pageToken = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WordbookList.prototype.write = function(output) {
  output.writeStructBegin('WordbookList');
  if (this.wordbooks !== null && this.wordbooks !== undefined) {
    output.writeFieldBegin('wordbooks', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.wordbooks.length);
    for (var iter135 in this.wordbooks)
    {
      if (this.wordbooks.hasOwnProperty(iter135))
      {
        iter135 = this.wordbooks[iter135];
        iter135.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pageToken !== null && this.pageToken !== undefined) {
    output.writeFieldBegin('pageToken', Thrift.Type.I64, 2);
    output.writeI64(this.pageToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MaterialList = module.exports.MaterialList = function(args) {
  this.materialSummaries = null;
  this.pageToken = null;
  if (args) {
    if (args.materialSummaries !== undefined && args.materialSummaries !== null) {
      this.materialSummaries = Thrift.copyList(args.materialSummaries, [learning_ttypes.MaterialSummary]);
    }
    if (args.pageToken !== undefined && args.pageToken !== null) {
      this.pageToken = args.pageToken;
    }
  }
};
MaterialList.prototype = {};
MaterialList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size136 = 0;
        var _rtmp3140;
        this.materialSummaries = [];
        var _etype139 = 0;
        _rtmp3140 = input.readListBegin();
        _etype139 = _rtmp3140.etype;
        _size136 = _rtmp3140.size;
        for (var _i141 = 0; _i141 < _size136; ++_i141)
        {
          var elem142 = null;
          elem142 = new learning_ttypes.MaterialSummary();
          elem142.read(input);
          this.materialSummaries.push(elem142);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.pageToken = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MaterialList.prototype.write = function(output) {
  output.writeStructBegin('MaterialList');
  if (this.materialSummaries !== null && this.materialSummaries !== undefined) {
    output.writeFieldBegin('materialSummaries', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.materialSummaries.length);
    for (var iter143 in this.materialSummaries)
    {
      if (this.materialSummaries.hasOwnProperty(iter143))
      {
        iter143 = this.materialSummaries[iter143];
        iter143.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pageToken !== null && this.pageToken !== undefined) {
    output.writeFieldBegin('pageToken', Thrift.Type.I64, 2);
    output.writeI64(this.pageToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SyncState = module.exports.SyncState = function(args) {
  this.updateCount = null;
  this.fullSyncBefore = null;
  if (args) {
    if (args.updateCount !== undefined && args.updateCount !== null) {
      this.updateCount = args.updateCount;
    }
    if (args.fullSyncBefore !== undefined && args.fullSyncBefore !== null) {
      this.fullSyncBefore = args.fullSyncBefore;
    }
  }
};
SyncState.prototype = {};
SyncState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.updateCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.fullSyncBefore = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncState.prototype.write = function(output) {
  output.writeStructBegin('SyncState');
  if (this.updateCount !== null && this.updateCount !== undefined) {
    output.writeFieldBegin('updateCount', Thrift.Type.I64, 1);
    output.writeI64(this.updateCount);
    output.writeFieldEnd();
  }
  if (this.fullSyncBefore !== null && this.fullSyncBefore !== undefined) {
    output.writeFieldBegin('fullSyncBefore', Thrift.Type.I64, 2);
    output.writeI64(this.fullSyncBefore);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SyncChunk = module.exports.SyncChunk = function(args) {
  this.updateInfo = null;
  this.updateCount = null;
  if (args) {
    if (args.updateInfo !== undefined && args.updateInfo !== null) {
      this.updateInfo = Thrift.copyList(args.updateInfo, [learning_ttypes.ObjectUpdateInfo]);
    }
    if (args.updateCount !== undefined && args.updateCount !== null) {
      this.updateCount = args.updateCount;
    }
  }
};
SyncChunk.prototype = {};
SyncChunk.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size144 = 0;
        var _rtmp3148;
        this.updateInfo = [];
        var _etype147 = 0;
        _rtmp3148 = input.readListBegin();
        _etype147 = _rtmp3148.etype;
        _size144 = _rtmp3148.size;
        for (var _i149 = 0; _i149 < _size144; ++_i149)
        {
          var elem150 = null;
          elem150 = new learning_ttypes.ObjectUpdateInfo();
          elem150.read(input);
          this.updateInfo.push(elem150);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.updateCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncChunk.prototype.write = function(output) {
  output.writeStructBegin('SyncChunk');
  if (this.updateInfo !== null && this.updateInfo !== undefined) {
    output.writeFieldBegin('updateInfo', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.updateInfo.length);
    for (var iter151 in this.updateInfo)
    {
      if (this.updateInfo.hasOwnProperty(iter151))
      {
        iter151 = this.updateInfo[iter151];
        iter151.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.updateCount !== null && this.updateCount !== undefined) {
    output.writeFieldBegin('updateCount', Thrift.Type.I64, 2);
    output.writeI64(this.updateCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FeedbackStat = module.exports.FeedbackStat = function(args) {
  this.resourceUri = null;
  this.numLikes = null;
  this.numComments = null;
  this.userLiked = null;
  if (args) {
    if (args.resourceUri !== undefined && args.resourceUri !== null) {
      this.resourceUri = args.resourceUri;
    }
    if (args.numLikes !== undefined && args.numLikes !== null) {
      this.numLikes = args.numLikes;
    }
    if (args.numComments !== undefined && args.numComments !== null) {
      this.numComments = args.numComments;
    }
    if (args.userLiked !== undefined && args.userLiked !== null) {
      this.userLiked = args.userLiked;
    }
  }
};
FeedbackStat.prototype = {};
FeedbackStat.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.resourceUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numLikes = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numComments = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.userLiked = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FeedbackStat.prototype.write = function(output) {
  output.writeStructBegin('FeedbackStat');
  if (this.resourceUri !== null && this.resourceUri !== undefined) {
    output.writeFieldBegin('resourceUri', Thrift.Type.STRING, 1);
    output.writeString(this.resourceUri);
    output.writeFieldEnd();
  }
  if (this.numLikes !== null && this.numLikes !== undefined) {
    output.writeFieldBegin('numLikes', Thrift.Type.I64, 2);
    output.writeI64(this.numLikes);
    output.writeFieldEnd();
  }
  if (this.numComments !== null && this.numComments !== undefined) {
    output.writeFieldBegin('numComments', Thrift.Type.I64, 3);
    output.writeI64(this.numComments);
    output.writeFieldEnd();
  }
  if (this.userLiked !== null && this.userLiked !== undefined) {
    output.writeFieldBegin('userLiked', Thrift.Type.BOOL, 4);
    output.writeBool(this.userLiked);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendIOError = module.exports.LextendIOError = function(args) {
  Thrift.TException.call(this, "LextendIOError")
  this.name = "LextendIOError"
  this.message = null;
  this.error = 0;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
Thrift.inherits(LextendIOError, Thrift.TException);
LextendIOError.prototype.name = 'LextendIOError';
LextendIOError.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.error = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendIOError.prototype.write = function(output) {
  output.writeStructBegin('LextendIOError');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.I32, 2);
    output.writeI32(this.error);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

