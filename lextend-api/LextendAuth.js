//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var auth_ttypes = require('./auth_types');
var learning_ttypes = require('./learning_types');
var common_ttypes = require('./common_types');
var annot_ttypes = require('./annot_types');
var media_ttypes = require('./media_types');


var ttypes = require('./backend_types');
//HELPER FUNCTIONS AND STRUCTURES

var LextendAuth_exist_args = function(args) {
  this.username = null;
  if (args) {
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
  }
};
LextendAuth_exist_args.prototype = {};
LextendAuth_exist_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendAuth_exist_args.prototype.write = function(output) {
  output.writeStructBegin('LextendAuth_exist_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendAuth_exist_result = function(args) {
  this.success = null;
  this.ioerror = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerror = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ioerror !== undefined && args.ioerror !== null) {
      this.ioerror = args.ioerror;
    }
  }
};
LextendAuth_exist_result.prototype = {};
LextendAuth_exist_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerror = new ttypes.LextendIOError();
        this.ioerror.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendAuth_exist_result.prototype.write = function(output) {
  output.writeStructBegin('LextendAuth_exist_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ioerror !== null && this.ioerror !== undefined) {
    output.writeFieldBegin('ioerror', Thrift.Type.STRUCT, 1);
    this.ioerror.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendAuth_createProfile_args = function(args) {
  this.profile = null;
  if (args) {
    if (args.profile !== undefined && args.profile !== null) {
      this.profile = new auth_ttypes.Profile(args.profile);
    }
  }
};
LextendAuth_createProfile_args.prototype = {};
LextendAuth_createProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.profile = new auth_ttypes.Profile();
        this.profile.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendAuth_createProfile_args.prototype.write = function(output) {
  output.writeStructBegin('LextendAuth_createProfile_args');
  if (this.profile !== null && this.profile !== undefined) {
    output.writeFieldBegin('profile', Thrift.Type.STRUCT, 1);
    this.profile.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendAuth_createProfile_result = function(args) {
  this.success = null;
  this.ioerr = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ioerr !== undefined && args.ioerr !== null) {
      this.ioerr = args.ioerr;
    }
  }
};
LextendAuth_createProfile_result.prototype = {};
LextendAuth_createProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerr = new ttypes.LextendIOError();
        this.ioerr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendAuth_createProfile_result.prototype.write = function(output) {
  output.writeStructBegin('LextendAuth_createProfile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ioerr !== null && this.ioerr !== undefined) {
    output.writeFieldBegin('ioerr', Thrift.Type.STRUCT, 1);
    this.ioerr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendAuth_getProfile_args = function(args) {
  this.authToken = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
  }
};
LextendAuth_getProfile_args.prototype = {};
LextendAuth_getProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendAuth_getProfile_args.prototype.write = function(output) {
  output.writeStructBegin('LextendAuth_getProfile_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendAuth_getProfile_result = function(args) {
  this.success = null;
  this.ioerr = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new auth_ttypes.Profile(args.success);
    }
    if (args.ioerr !== undefined && args.ioerr !== null) {
      this.ioerr = args.ioerr;
    }
  }
};
LextendAuth_getProfile_result.prototype = {};
LextendAuth_getProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new auth_ttypes.Profile();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerr = new ttypes.LextendIOError();
        this.ioerr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendAuth_getProfile_result.prototype.write = function(output) {
  output.writeStructBegin('LextendAuth_getProfile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ioerr !== null && this.ioerr !== undefined) {
    output.writeFieldBegin('ioerr', Thrift.Type.STRUCT, 1);
    this.ioerr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendAuth_updateProfile_args = function(args) {
  this.authToken = null;
  this.newProfile = null;
  this.profilePic = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.newProfile !== undefined && args.newProfile !== null) {
      this.newProfile = new auth_ttypes.Profile(args.newProfile);
    }
    if (args.profilePic !== undefined && args.profilePic !== null) {
      this.profilePic = args.profilePic;
    }
  }
};
LextendAuth_updateProfile_args.prototype = {};
LextendAuth_updateProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.newProfile = new auth_ttypes.Profile();
        this.newProfile.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.profilePic = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendAuth_updateProfile_args.prototype.write = function(output) {
  output.writeStructBegin('LextendAuth_updateProfile_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.newProfile !== null && this.newProfile !== undefined) {
    output.writeFieldBegin('newProfile', Thrift.Type.STRUCT, 2);
    this.newProfile.write(output);
    output.writeFieldEnd();
  }
  if (this.profilePic !== null && this.profilePic !== undefined) {
    output.writeFieldBegin('profilePic', Thrift.Type.STRING, 3);
    output.writeBinary(this.profilePic);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendAuth_updateProfile_result = function(args) {
  this.success = null;
  this.ioerr = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new auth_ttypes.Profile(args.success);
    }
    if (args.ioerr !== undefined && args.ioerr !== null) {
      this.ioerr = args.ioerr;
    }
  }
};
LextendAuth_updateProfile_result.prototype = {};
LextendAuth_updateProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new auth_ttypes.Profile();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerr = new ttypes.LextendIOError();
        this.ioerr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendAuth_updateProfile_result.prototype.write = function(output) {
  output.writeStructBegin('LextendAuth_updateProfile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ioerr !== null && this.ioerr !== undefined) {
    output.writeFieldBegin('ioerr', Thrift.Type.STRUCT, 1);
    this.ioerr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendAuth_loginWithPassword_args = function(args) {
  this.username = null;
  this.password = null;
  this.installationId = null;
  if (args) {
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.installationId !== undefined && args.installationId !== null) {
      this.installationId = args.installationId;
    }
  }
};
LextendAuth_loginWithPassword_args.prototype = {};
LextendAuth_loginWithPassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.installationId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendAuth_loginWithPassword_args.prototype.write = function(output) {
  output.writeStructBegin('LextendAuth_loginWithPassword_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.installationId !== null && this.installationId !== undefined) {
    output.writeFieldBegin('installationId', Thrift.Type.STRING, 3);
    output.writeString(this.installationId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendAuth_loginWithPassword_result = function(args) {
  this.success = null;
  this.ioerr = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new auth_ttypes.Token(args.success);
    }
    if (args.ioerr !== undefined && args.ioerr !== null) {
      this.ioerr = args.ioerr;
    }
  }
};
LextendAuth_loginWithPassword_result.prototype = {};
LextendAuth_loginWithPassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new auth_ttypes.Token();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerr = new ttypes.LextendIOError();
        this.ioerr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendAuth_loginWithPassword_result.prototype.write = function(output) {
  output.writeStructBegin('LextendAuth_loginWithPassword_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ioerr !== null && this.ioerr !== undefined) {
    output.writeFieldBegin('ioerr', Thrift.Type.STRUCT, 1);
    this.ioerr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendAuth_loginWithGoogleAccount_args = function(args) {
  this.googleTokenStr = null;
  this.installationId = null;
  if (args) {
    if (args.googleTokenStr !== undefined && args.googleTokenStr !== null) {
      this.googleTokenStr = args.googleTokenStr;
    }
    if (args.installationId !== undefined && args.installationId !== null) {
      this.installationId = args.installationId;
    }
  }
};
LextendAuth_loginWithGoogleAccount_args.prototype = {};
LextendAuth_loginWithGoogleAccount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.googleTokenStr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.installationId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendAuth_loginWithGoogleAccount_args.prototype.write = function(output) {
  output.writeStructBegin('LextendAuth_loginWithGoogleAccount_args');
  if (this.googleTokenStr !== null && this.googleTokenStr !== undefined) {
    output.writeFieldBegin('googleTokenStr', Thrift.Type.STRING, 1);
    output.writeString(this.googleTokenStr);
    output.writeFieldEnd();
  }
  if (this.installationId !== null && this.installationId !== undefined) {
    output.writeFieldBegin('installationId', Thrift.Type.STRING, 2);
    output.writeString(this.installationId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendAuth_loginWithGoogleAccount_result = function(args) {
  this.success = null;
  this.ioerr = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new auth_ttypes.Token(args.success);
    }
    if (args.ioerr !== undefined && args.ioerr !== null) {
      this.ioerr = args.ioerr;
    }
  }
};
LextendAuth_loginWithGoogleAccount_result.prototype = {};
LextendAuth_loginWithGoogleAccount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new auth_ttypes.Token();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerr = new ttypes.LextendIOError();
        this.ioerr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendAuth_loginWithGoogleAccount_result.prototype.write = function(output) {
  output.writeStructBegin('LextendAuth_loginWithGoogleAccount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ioerr !== null && this.ioerr !== undefined) {
    output.writeFieldBegin('ioerr', Thrift.Type.STRUCT, 1);
    this.ioerr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendAuth_forgotPassword_args = function(args) {
  this.username = null;
  if (args) {
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
  }
};
LextendAuth_forgotPassword_args.prototype = {};
LextendAuth_forgotPassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendAuth_forgotPassword_args.prototype.write = function(output) {
  output.writeStructBegin('LextendAuth_forgotPassword_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendAuth_forgotPassword_result = function(args) {
  this.success = null;
  this.ioerr = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ioerr !== undefined && args.ioerr !== null) {
      this.ioerr = args.ioerr;
    }
  }
};
LextendAuth_forgotPassword_result.prototype = {};
LextendAuth_forgotPassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerr = new ttypes.LextendIOError();
        this.ioerr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendAuth_forgotPassword_result.prototype.write = function(output) {
  output.writeStructBegin('LextendAuth_forgotPassword_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ioerr !== null && this.ioerr !== undefined) {
    output.writeFieldBegin('ioerr', Thrift.Type.STRUCT, 1);
    this.ioerr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendAuth_logout_args = function(args) {
  this.authToken = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
  }
};
LextendAuth_logout_args.prototype = {};
LextendAuth_logout_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendAuth_logout_args.prototype.write = function(output) {
  output.writeStructBegin('LextendAuth_logout_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendAuth_logout_result = function(args) {
  this.success = null;
  this.ioerr = null;
  if (args instanceof ttypes.LextendIOError) {
    this.ioerr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ioerr !== undefined && args.ioerr !== null) {
      this.ioerr = args.ioerr;
    }
  }
};
LextendAuth_logout_result.prototype = {};
LextendAuth_logout_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioerr = new ttypes.LextendIOError();
        this.ioerr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LextendAuth_logout_result.prototype.write = function(output) {
  output.writeStructBegin('LextendAuth_logout_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ioerr !== null && this.ioerr !== undefined) {
    output.writeFieldBegin('ioerr', Thrift.Type.STRUCT, 1);
    this.ioerr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LextendAuthClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
LextendAuthClient.prototype = {};
LextendAuthClient.prototype.seqid = function() { return this._seqid; }
LextendAuthClient.prototype.new_seqid = function() { return this._seqid += 1; }
LextendAuthClient.prototype.exist = function(username, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_exist(username);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_exist(username);
  }
};

LextendAuthClient.prototype.send_exist = function(username) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('exist', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendAuth_exist_args();
  args.username = username;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendAuthClient.prototype.recv_exist = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendAuth_exist_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerror) {
    return callback(result.ioerror);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('exist failed: unknown result');
};
LextendAuthClient.prototype.createProfile = function(profile, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createProfile(profile);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createProfile(profile);
  }
};

LextendAuthClient.prototype.send_createProfile = function(profile) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createProfile', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendAuth_createProfile_args();
  args.profile = profile;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendAuthClient.prototype.recv_createProfile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendAuth_createProfile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerr) {
    return callback(result.ioerr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createProfile failed: unknown result');
};
LextendAuthClient.prototype.getProfile = function(authToken, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getProfile(authToken);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getProfile(authToken);
  }
};

LextendAuthClient.prototype.send_getProfile = function(authToken) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getProfile', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendAuth_getProfile_args();
  args.authToken = authToken;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendAuthClient.prototype.recv_getProfile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendAuth_getProfile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerr) {
    return callback(result.ioerr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getProfile failed: unknown result');
};
LextendAuthClient.prototype.updateProfile = function(authToken, newProfile, profilePic, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateProfile(authToken, newProfile, profilePic);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateProfile(authToken, newProfile, profilePic);
  }
};

LextendAuthClient.prototype.send_updateProfile = function(authToken, newProfile, profilePic) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateProfile', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendAuth_updateProfile_args();
  args.authToken = authToken;
  args.newProfile = newProfile;
  args.profilePic = profilePic;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendAuthClient.prototype.recv_updateProfile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendAuth_updateProfile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerr) {
    return callback(result.ioerr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateProfile failed: unknown result');
};
LextendAuthClient.prototype.loginWithPassword = function(username, password, installationId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loginWithPassword(username, password, installationId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loginWithPassword(username, password, installationId);
  }
};

LextendAuthClient.prototype.send_loginWithPassword = function(username, password, installationId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loginWithPassword', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendAuth_loginWithPassword_args();
  args.username = username;
  args.password = password;
  args.installationId = installationId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendAuthClient.prototype.recv_loginWithPassword = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendAuth_loginWithPassword_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerr) {
    return callback(result.ioerr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loginWithPassword failed: unknown result');
};
LextendAuthClient.prototype.loginWithGoogleAccount = function(googleTokenStr, installationId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loginWithGoogleAccount(googleTokenStr, installationId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loginWithGoogleAccount(googleTokenStr, installationId);
  }
};

LextendAuthClient.prototype.send_loginWithGoogleAccount = function(googleTokenStr, installationId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loginWithGoogleAccount', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendAuth_loginWithGoogleAccount_args();
  args.googleTokenStr = googleTokenStr;
  args.installationId = installationId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendAuthClient.prototype.recv_loginWithGoogleAccount = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendAuth_loginWithGoogleAccount_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerr) {
    return callback(result.ioerr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loginWithGoogleAccount failed: unknown result');
};
LextendAuthClient.prototype.forgotPassword = function(username, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_forgotPassword(username);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_forgotPassword(username);
  }
};

LextendAuthClient.prototype.send_forgotPassword = function(username) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('forgotPassword', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendAuth_forgotPassword_args();
  args.username = username;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendAuthClient.prototype.recv_forgotPassword = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendAuth_forgotPassword_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerr) {
    return callback(result.ioerr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('forgotPassword failed: unknown result');
};
LextendAuthClient.prototype.logout = function(authToken, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_logout(authToken);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_logout(authToken);
  }
};

LextendAuthClient.prototype.send_logout = function(authToken) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('logout', Thrift.MessageType.CALL, this.seqid());
  var args = new LextendAuth_logout_args();
  args.authToken = authToken;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LextendAuthClient.prototype.recv_logout = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LextendAuth_logout_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ioerr) {
    return callback(result.ioerr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('logout failed: unknown result');
};
var LextendAuthProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
LextendAuthProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

LextendAuthProcessor.prototype.process_exist = function(seqid, input, output) {
  var args = new LextendAuth_exist_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.exist.length === 1) {
    Q.fcall(this._handler.exist, args.username)
      .then(function(result) {
        var result = new LextendAuth_exist_result({success: result});
        output.writeMessageBegin("exist", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendAuth_exist_result(err);
          output.writeMessageBegin("exist", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("exist", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.exist(args.username, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendAuth_exist_result((err != null ? err : {success: result}));
        output.writeMessageBegin("exist", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("exist", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendAuthProcessor.prototype.process_createProfile = function(seqid, input, output) {
  var args = new LextendAuth_createProfile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createProfile.length === 1) {
    Q.fcall(this._handler.createProfile, args.profile)
      .then(function(result) {
        var result = new LextendAuth_createProfile_result({success: result});
        output.writeMessageBegin("createProfile", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendAuth_createProfile_result(err);
          output.writeMessageBegin("createProfile", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createProfile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createProfile(args.profile, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendAuth_createProfile_result((err != null ? err : {success: result}));
        output.writeMessageBegin("createProfile", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createProfile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendAuthProcessor.prototype.process_getProfile = function(seqid, input, output) {
  var args = new LextendAuth_getProfile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getProfile.length === 1) {
    Q.fcall(this._handler.getProfile, args.authToken)
      .then(function(result) {
        var result = new LextendAuth_getProfile_result({success: result});
        output.writeMessageBegin("getProfile", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendAuth_getProfile_result(err);
          output.writeMessageBegin("getProfile", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProfile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getProfile(args.authToken, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendAuth_getProfile_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getProfile", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getProfile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendAuthProcessor.prototype.process_updateProfile = function(seqid, input, output) {
  var args = new LextendAuth_updateProfile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateProfile.length === 3) {
    Q.fcall(this._handler.updateProfile, args.authToken, args.newProfile, args.profilePic)
      .then(function(result) {
        var result = new LextendAuth_updateProfile_result({success: result});
        output.writeMessageBegin("updateProfile", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendAuth_updateProfile_result(err);
          output.writeMessageBegin("updateProfile", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateProfile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateProfile(args.authToken, args.newProfile, args.profilePic, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendAuth_updateProfile_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateProfile", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateProfile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendAuthProcessor.prototype.process_loginWithPassword = function(seqid, input, output) {
  var args = new LextendAuth_loginWithPassword_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loginWithPassword.length === 3) {
    Q.fcall(this._handler.loginWithPassword, args.username, args.password, args.installationId)
      .then(function(result) {
        var result = new LextendAuth_loginWithPassword_result({success: result});
        output.writeMessageBegin("loginWithPassword", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendAuth_loginWithPassword_result(err);
          output.writeMessageBegin("loginWithPassword", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loginWithPassword", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loginWithPassword(args.username, args.password, args.installationId, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendAuth_loginWithPassword_result((err != null ? err : {success: result}));
        output.writeMessageBegin("loginWithPassword", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loginWithPassword", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendAuthProcessor.prototype.process_loginWithGoogleAccount = function(seqid, input, output) {
  var args = new LextendAuth_loginWithGoogleAccount_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loginWithGoogleAccount.length === 2) {
    Q.fcall(this._handler.loginWithGoogleAccount, args.googleTokenStr, args.installationId)
      .then(function(result) {
        var result = new LextendAuth_loginWithGoogleAccount_result({success: result});
        output.writeMessageBegin("loginWithGoogleAccount", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendAuth_loginWithGoogleAccount_result(err);
          output.writeMessageBegin("loginWithGoogleAccount", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loginWithGoogleAccount", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loginWithGoogleAccount(args.googleTokenStr, args.installationId, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendAuth_loginWithGoogleAccount_result((err != null ? err : {success: result}));
        output.writeMessageBegin("loginWithGoogleAccount", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loginWithGoogleAccount", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendAuthProcessor.prototype.process_forgotPassword = function(seqid, input, output) {
  var args = new LextendAuth_forgotPassword_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.forgotPassword.length === 1) {
    Q.fcall(this._handler.forgotPassword, args.username)
      .then(function(result) {
        var result = new LextendAuth_forgotPassword_result({success: result});
        output.writeMessageBegin("forgotPassword", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendAuth_forgotPassword_result(err);
          output.writeMessageBegin("forgotPassword", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("forgotPassword", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.forgotPassword(args.username, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendAuth_forgotPassword_result((err != null ? err : {success: result}));
        output.writeMessageBegin("forgotPassword", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("forgotPassword", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LextendAuthProcessor.prototype.process_logout = function(seqid, input, output) {
  var args = new LextendAuth_logout_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.logout.length === 1) {
    Q.fcall(this._handler.logout, args.authToken)
      .then(function(result) {
        var result = new LextendAuth_logout_result({success: result});
        output.writeMessageBegin("logout", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.LextendIOError) {
          var result = new LextendAuth_logout_result(err);
          output.writeMessageBegin("logout", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("logout", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.logout(args.authToken, function (err, result) {
      if (err == null || err instanceof ttypes.LextendIOError) {
        var result = new LextendAuth_logout_result((err != null ? err : {success: result}));
        output.writeMessageBegin("logout", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("logout", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

