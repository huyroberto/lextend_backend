//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var annot_ttypes = require('./annot_types');


var ttypes = module.exports = {};
ttypes.LangLevel = {
  'BEGINNER' : 0,
  'ELEMENTARY' : 1,
  'INTERMEDIATE' : 2,
  'UPPER_INTERMEDIATE' : 3,
  'ADVANCE' : 4,
  'UPPER_ADVANCE' : 5
};
ttypes.WORDSTATUS = {
  'WORD_REMEMBERED' : 0,
  'WORD_LEARNING' : 1,
  'WORD_NEW' : 2
};
ttypes.MaterialType = {
  'GRAMMAR_POINT' : 1,
  'READING_STORY' : 2,
  'DIALOG' : 3,
  'NEWS_STORY' : 4
};
var ObjectUpdateInfo = module.exports.ObjectUpdateInfo = function(args) {
  this.uri = null;
  this.USN = null;
  this.isDeleted = null;
  this.attachment = null;
  if (args) {
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uri is unset!');
    }
    if (args.USN !== undefined && args.USN !== null) {
      this.USN = args.USN;
    }
    if (args.isDeleted !== undefined && args.isDeleted !== null) {
      this.isDeleted = args.isDeleted;
    }
    if (args.attachment !== undefined && args.attachment !== null) {
      this.attachment = args.attachment;
    }
  }
};
ObjectUpdateInfo.prototype = {};
ObjectUpdateInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.USN = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isDeleted = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.attachment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ObjectUpdateInfo.prototype.write = function(output) {
  output.writeStructBegin('ObjectUpdateInfo');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.USN !== null && this.USN !== undefined) {
    output.writeFieldBegin('USN', Thrift.Type.I64, 2);
    output.writeI64(this.USN);
    output.writeFieldEnd();
  }
  if (this.isDeleted !== null && this.isDeleted !== undefined) {
    output.writeFieldBegin('isDeleted', Thrift.Type.BOOL, 3);
    output.writeBool(this.isDeleted);
    output.writeFieldEnd();
  }
  if (this.attachment !== null && this.attachment !== undefined) {
    output.writeFieldBegin('attachment', Thrift.Type.STRING, 4);
    output.writeString(this.attachment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Comment = module.exports.Comment = function(args) {
  this.username = null;
  this.message = null;
  this.resourceUri = null;
  this.commentTime = null;
  this.commentedLang = null;
  this.commentUri = null;
  if (args) {
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
    if (args.resourceUri !== undefined && args.resourceUri !== null) {
      this.resourceUri = args.resourceUri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field resourceUri is unset!');
    }
    if (args.commentTime !== undefined && args.commentTime !== null) {
      this.commentTime = args.commentTime;
    }
    if (args.commentedLang !== undefined && args.commentedLang !== null) {
      this.commentedLang = args.commentedLang;
    }
    if (args.commentUri !== undefined && args.commentUri !== null) {
      this.commentUri = args.commentUri;
    }
  }
};
Comment.prototype = {};
Comment.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.resourceUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.commentTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.commentedLang = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.commentUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Comment.prototype.write = function(output) {
  output.writeStructBegin('Comment');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.resourceUri !== null && this.resourceUri !== undefined) {
    output.writeFieldBegin('resourceUri', Thrift.Type.STRING, 3);
    output.writeString(this.resourceUri);
    output.writeFieldEnd();
  }
  if (this.commentTime !== null && this.commentTime !== undefined) {
    output.writeFieldBegin('commentTime', Thrift.Type.I64, 4);
    output.writeI64(this.commentTime);
    output.writeFieldEnd();
  }
  if (this.commentedLang !== null && this.commentedLang !== undefined) {
    output.writeFieldBegin('commentedLang', Thrift.Type.STRING, 5);
    output.writeString(this.commentedLang);
    output.writeFieldEnd();
  }
  if (this.commentUri !== null && this.commentUri !== undefined) {
    output.writeFieldBegin('commentUri', Thrift.Type.STRING, 6);
    output.writeString(this.commentUri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LearningSetting = module.exports.LearningSetting = function(args) {
  this.langid = null;
  this.viaLangids = null;
  this.numNewWordPerDay = null;
  this.startDate = null;
  this.numWordPerDay = null;
  this.startLevel = null;
  this.modifiedTime = null;
  if (args) {
    if (args.langid !== undefined && args.langid !== null) {
      this.langid = args.langid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field langid is unset!');
    }
    if (args.viaLangids !== undefined && args.viaLangids !== null) {
      this.viaLangids = Thrift.copyList(args.viaLangids, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field viaLangids is unset!');
    }
    if (args.numNewWordPerDay !== undefined && args.numNewWordPerDay !== null) {
      this.numNewWordPerDay = args.numNewWordPerDay;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numNewWordPerDay is unset!');
    }
    if (args.startDate !== undefined && args.startDate !== null) {
      this.startDate = args.startDate;
    }
    if (args.numWordPerDay !== undefined && args.numWordPerDay !== null) {
      this.numWordPerDay = args.numWordPerDay;
    }
    if (args.startLevel !== undefined && args.startLevel !== null) {
      this.startLevel = args.startLevel;
    }
    if (args.modifiedTime !== undefined && args.modifiedTime !== null) {
      this.modifiedTime = args.modifiedTime;
    }
  }
};
LearningSetting.prototype = {};
LearningSetting.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.langid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size0 = 0;
        var _rtmp34;
        this.viaLangids = [];
        var _etype3 = 0;
        _rtmp34 = input.readSetBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.viaLangids.push(elem6);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numNewWordPerDay = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.startDate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.numWordPerDay = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.startLevel = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.modifiedTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LearningSetting.prototype.write = function(output) {
  output.writeStructBegin('LearningSetting');
  if (this.langid !== null && this.langid !== undefined) {
    output.writeFieldBegin('langid', Thrift.Type.STRING, 1);
    output.writeString(this.langid);
    output.writeFieldEnd();
  }
  if (this.viaLangids !== null && this.viaLangids !== undefined) {
    output.writeFieldBegin('viaLangids', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRING, this.viaLangids.length);
    for (var iter7 in this.viaLangids)
    {
      if (this.viaLangids.hasOwnProperty(iter7))
      {
        iter7 = this.viaLangids[iter7];
        output.writeString(iter7);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.numNewWordPerDay !== null && this.numNewWordPerDay !== undefined) {
    output.writeFieldBegin('numNewWordPerDay', Thrift.Type.I32, 3);
    output.writeI32(this.numNewWordPerDay);
    output.writeFieldEnd();
  }
  if (this.startDate !== null && this.startDate !== undefined) {
    output.writeFieldBegin('startDate', Thrift.Type.STRING, 4);
    output.writeString(this.startDate);
    output.writeFieldEnd();
  }
  if (this.numWordPerDay !== null && this.numWordPerDay !== undefined) {
    output.writeFieldBegin('numWordPerDay', Thrift.Type.I32, 5);
    output.writeI32(this.numWordPerDay);
    output.writeFieldEnd();
  }
  if (this.startLevel !== null && this.startLevel !== undefined) {
    output.writeFieldBegin('startLevel', Thrift.Type.I32, 6);
    output.writeI32(this.startLevel);
    output.writeFieldEnd();
  }
  if (this.modifiedTime !== null && this.modifiedTime !== undefined) {
    output.writeFieldBegin('modifiedTime', Thrift.Type.I64, 7);
    output.writeI64(this.modifiedTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BilingualSentence = module.exports.BilingualSentence = function(args) {
  this.sentence = null;
  this.langid = null;
  this.sentUri = null;
  this.tolangid = null;
  this.translationText = null;
  this.translatedBy = null;
  this.sentPron = null;
  this.transUri = null;
  this.wordTokenSequence = null;
  this.indexedWords = null;
  if (args) {
    if (args.sentence !== undefined && args.sentence !== null) {
      this.sentence = args.sentence;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sentence is unset!');
    }
    if (args.langid !== undefined && args.langid !== null) {
      this.langid = args.langid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field langid is unset!');
    }
    if (args.sentUri !== undefined && args.sentUri !== null) {
      this.sentUri = args.sentUri;
    }
    if (args.tolangid !== undefined && args.tolangid !== null) {
      this.tolangid = args.tolangid;
    }
    if (args.translationText !== undefined && args.translationText !== null) {
      this.translationText = args.translationText;
    }
    if (args.translatedBy !== undefined && args.translatedBy !== null) {
      this.translatedBy = args.translatedBy;
    }
    if (args.sentPron !== undefined && args.sentPron !== null) {
      this.sentPron = args.sentPron;
    }
    if (args.transUri !== undefined && args.transUri !== null) {
      this.transUri = args.transUri;
    }
    if (args.wordTokenSequence !== undefined && args.wordTokenSequence !== null) {
      this.wordTokenSequence = new annot_ttypes.AnnotationSequence(args.wordTokenSequence);
    }
    if (args.indexedWords !== undefined && args.indexedWords !== null) {
      this.indexedWords = Thrift.copyList(args.indexedWords, [null]);
    }
  }
};
BilingualSentence.prototype = {};
BilingualSentence.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sentence = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.langid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sentUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.tolangid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.translationText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.translatedBy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.sentPron = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.transUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.wordTokenSequence = new annot_ttypes.AnnotationSequence();
        this.wordTokenSequence.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.indexedWords = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.indexedWords.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BilingualSentence.prototype.write = function(output) {
  output.writeStructBegin('BilingualSentence');
  if (this.sentence !== null && this.sentence !== undefined) {
    output.writeFieldBegin('sentence', Thrift.Type.STRING, 1);
    output.writeString(this.sentence);
    output.writeFieldEnd();
  }
  if (this.langid !== null && this.langid !== undefined) {
    output.writeFieldBegin('langid', Thrift.Type.STRING, 2);
    output.writeString(this.langid);
    output.writeFieldEnd();
  }
  if (this.sentUri !== null && this.sentUri !== undefined) {
    output.writeFieldBegin('sentUri', Thrift.Type.STRING, 3);
    output.writeString(this.sentUri);
    output.writeFieldEnd();
  }
  if (this.tolangid !== null && this.tolangid !== undefined) {
    output.writeFieldBegin('tolangid', Thrift.Type.STRING, 4);
    output.writeString(this.tolangid);
    output.writeFieldEnd();
  }
  if (this.translationText !== null && this.translationText !== undefined) {
    output.writeFieldBegin('translationText', Thrift.Type.STRING, 5);
    output.writeString(this.translationText);
    output.writeFieldEnd();
  }
  if (this.translatedBy !== null && this.translatedBy !== undefined) {
    output.writeFieldBegin('translatedBy', Thrift.Type.STRING, 6);
    output.writeString(this.translatedBy);
    output.writeFieldEnd();
  }
  if (this.sentPron !== null && this.sentPron !== undefined) {
    output.writeFieldBegin('sentPron', Thrift.Type.STRING, 7);
    output.writeString(this.sentPron);
    output.writeFieldEnd();
  }
  if (this.transUri !== null && this.transUri !== undefined) {
    output.writeFieldBegin('transUri', Thrift.Type.STRING, 8);
    output.writeString(this.transUri);
    output.writeFieldEnd();
  }
  if (this.wordTokenSequence !== null && this.wordTokenSequence !== undefined) {
    output.writeFieldBegin('wordTokenSequence', Thrift.Type.STRUCT, 9);
    this.wordTokenSequence.write(output);
    output.writeFieldEnd();
  }
  if (this.indexedWords !== null && this.indexedWords !== undefined) {
    output.writeFieldBegin('indexedWords', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRING, this.indexedWords.length);
    for (var iter15 in this.indexedWords)
    {
      if (this.indexedWords.hasOwnProperty(iter15))
      {
        iter15 = this.indexedWords[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExampleList = module.exports.ExampleList = function(args) {
  this.examples = null;
  if (args) {
    if (args.examples !== undefined && args.examples !== null) {
      this.examples = Thrift.copyList(args.examples, [ttypes.BilingualSentence]);
    }
  }
};
ExampleList.prototype = {};
ExampleList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.examples = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.BilingualSentence();
          elem22.read(input);
          this.examples.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExampleList.prototype.write = function(output) {
  output.writeStructBegin('ExampleList');
  if (this.examples !== null && this.examples !== undefined) {
    output.writeFieldBegin('examples', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.examples.length);
    for (var iter23 in this.examples)
    {
      if (this.examples.hasOwnProperty(iter23))
      {
        iter23 = this.examples[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserWord = module.exports.UserWord = function(args) {
  this.word = null;
  this.langid = null;
  this.userWordUri = null;
  this.langidToDesp = null;
  this.userAddedPicUri = null;
  this.userAddedAudioUri = null;
  this.examples = null;
  this.USN = null;
  this.modifiedTime = null;
  if (args) {
    if (args.word !== undefined && args.word !== null) {
      this.word = args.word;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field word is unset!');
    }
    if (args.langid !== undefined && args.langid !== null) {
      this.langid = args.langid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field langid is unset!');
    }
    if (args.userWordUri !== undefined && args.userWordUri !== null) {
      this.userWordUri = args.userWordUri;
    }
    if (args.langidToDesp !== undefined && args.langidToDesp !== null) {
      this.langidToDesp = Thrift.copyMap(args.langidToDesp, [null]);
    }
    if (args.userAddedPicUri !== undefined && args.userAddedPicUri !== null) {
      this.userAddedPicUri = args.userAddedPicUri;
    }
    if (args.userAddedAudioUri !== undefined && args.userAddedAudioUri !== null) {
      this.userAddedAudioUri = args.userAddedAudioUri;
    }
    if (args.examples !== undefined && args.examples !== null) {
      this.examples = Thrift.copyList(args.examples, [ttypes.BilingualSentence]);
    }
    if (args.USN !== undefined && args.USN !== null) {
      this.USN = args.USN;
    }
    if (args.modifiedTime !== undefined && args.modifiedTime !== null) {
      this.modifiedTime = args.modifiedTime;
    }
  }
};
UserWord.prototype = {};
UserWord.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.word = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.langid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userWordUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size24 = 0;
        var _rtmp328;
        this.langidToDesp = {};
        var _ktype25 = 0;
        var _vtype26 = 0;
        _rtmp328 = input.readMapBegin();
        _ktype25 = _rtmp328.ktype;
        _vtype26 = _rtmp328.vtype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var key30 = null;
          var val31 = null;
          key30 = input.readString();
          val31 = input.readString();
          this.langidToDesp[key30] = val31;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.userAddedPicUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.userAddedAudioUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.examples = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.BilingualSentence();
          elem38.read(input);
          this.examples.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.USN = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.modifiedTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserWord.prototype.write = function(output) {
  output.writeStructBegin('UserWord');
  if (this.word !== null && this.word !== undefined) {
    output.writeFieldBegin('word', Thrift.Type.STRING, 1);
    output.writeString(this.word);
    output.writeFieldEnd();
  }
  if (this.langid !== null && this.langid !== undefined) {
    output.writeFieldBegin('langid', Thrift.Type.STRING, 2);
    output.writeString(this.langid);
    output.writeFieldEnd();
  }
  if (this.userWordUri !== null && this.userWordUri !== undefined) {
    output.writeFieldBegin('userWordUri', Thrift.Type.STRING, 3);
    output.writeString(this.userWordUri);
    output.writeFieldEnd();
  }
  if (this.langidToDesp !== null && this.langidToDesp !== undefined) {
    output.writeFieldBegin('langidToDesp', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.langidToDesp));
    for (var kiter39 in this.langidToDesp)
    {
      if (this.langidToDesp.hasOwnProperty(kiter39))
      {
        var viter40 = this.langidToDesp[kiter39];
        output.writeString(kiter39);
        output.writeString(viter40);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.userAddedPicUri !== null && this.userAddedPicUri !== undefined) {
    output.writeFieldBegin('userAddedPicUri', Thrift.Type.STRING, 5);
    output.writeString(this.userAddedPicUri);
    output.writeFieldEnd();
  }
  if (this.userAddedAudioUri !== null && this.userAddedAudioUri !== undefined) {
    output.writeFieldBegin('userAddedAudioUri', Thrift.Type.STRING, 6);
    output.writeString(this.userAddedAudioUri);
    output.writeFieldEnd();
  }
  if (this.examples !== null && this.examples !== undefined) {
    output.writeFieldBegin('examples', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.examples.length);
    for (var iter41 in this.examples)
    {
      if (this.examples.hasOwnProperty(iter41))
      {
        iter41 = this.examples[iter41];
        iter41.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.USN !== null && this.USN !== undefined) {
    output.writeFieldBegin('USN', Thrift.Type.I64, 8);
    output.writeI64(this.USN);
    output.writeFieldEnd();
  }
  if (this.modifiedTime !== null && this.modifiedTime !== undefined) {
    output.writeFieldBegin('modifiedTime', Thrift.Type.I64, 9);
    output.writeI64(this.modifiedTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Sentence = module.exports.Sentence = function(args) {
  this.langid = null;
  this.text = null;
  this.sentUri = null;
  this.source = null;
  this.textPronunciation = null;
  this.audioUri = null;
  this.wordTokenSeq = null;
  this.indexedWords = null;
  this.addedBy = null;
  if (args) {
    if (args.langid !== undefined && args.langid !== null) {
      this.langid = args.langid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field langid is unset!');
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field text is unset!');
    }
    if (args.sentUri !== undefined && args.sentUri !== null) {
      this.sentUri = args.sentUri;
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.textPronunciation !== undefined && args.textPronunciation !== null) {
      this.textPronunciation = args.textPronunciation;
    }
    if (args.audioUri !== undefined && args.audioUri !== null) {
      this.audioUri = args.audioUri;
    }
    if (args.wordTokenSeq !== undefined && args.wordTokenSeq !== null) {
      this.wordTokenSeq = new annot_ttypes.AnnotationSequence(args.wordTokenSeq);
    }
    if (args.indexedWords !== undefined && args.indexedWords !== null) {
      this.indexedWords = Thrift.copyList(args.indexedWords, [null]);
    }
    if (args.addedBy !== undefined && args.addedBy !== null) {
      this.addedBy = args.addedBy;
    }
  }
};
Sentence.prototype = {};
Sentence.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.langid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sentUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.textPronunciation = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.audioUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.wordTokenSeq = new annot_ttypes.AnnotationSequence();
        this.wordTokenSeq.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size42 = 0;
        var _rtmp346;
        this.indexedWords = [];
        var _etype45 = 0;
        _rtmp346 = input.readListBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = input.readString();
          this.indexedWords.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.addedBy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Sentence.prototype.write = function(output) {
  output.writeStructBegin('Sentence');
  if (this.langid !== null && this.langid !== undefined) {
    output.writeFieldBegin('langid', Thrift.Type.STRING, 1);
    output.writeString(this.langid);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 2);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.sentUri !== null && this.sentUri !== undefined) {
    output.writeFieldBegin('sentUri', Thrift.Type.STRING, 3);
    output.writeString(this.sentUri);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 4);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.textPronunciation !== null && this.textPronunciation !== undefined) {
    output.writeFieldBegin('textPronunciation', Thrift.Type.STRING, 5);
    output.writeString(this.textPronunciation);
    output.writeFieldEnd();
  }
  if (this.audioUri !== null && this.audioUri !== undefined) {
    output.writeFieldBegin('audioUri', Thrift.Type.STRING, 6);
    output.writeString(this.audioUri);
    output.writeFieldEnd();
  }
  if (this.wordTokenSeq !== null && this.wordTokenSeq !== undefined) {
    output.writeFieldBegin('wordTokenSeq', Thrift.Type.STRUCT, 7);
    this.wordTokenSeq.write(output);
    output.writeFieldEnd();
  }
  if (this.indexedWords !== null && this.indexedWords !== undefined) {
    output.writeFieldBegin('indexedWords', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRING, this.indexedWords.length);
    for (var iter49 in this.indexedWords)
    {
      if (this.indexedWords.hasOwnProperty(iter49))
      {
        iter49 = this.indexedWords[iter49];
        output.writeString(iter49);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.addedBy !== null && this.addedBy !== undefined) {
    output.writeFieldBegin('addedBy', Thrift.Type.STRING, 9);
    output.writeString(this.addedBy);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Translation = module.exports.Translation = function(args) {
  this.sentUri = null;
  this.tolangid = null;
  this.text = null;
  this.transUri = null;
  this.translatedBy = null;
  this.translatedTime = null;
  if (args) {
    if (args.sentUri !== undefined && args.sentUri !== null) {
      this.sentUri = args.sentUri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sentUri is unset!');
    }
    if (args.tolangid !== undefined && args.tolangid !== null) {
      this.tolangid = args.tolangid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tolangid is unset!');
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field text is unset!');
    }
    if (args.transUri !== undefined && args.transUri !== null) {
      this.transUri = args.transUri;
    }
    if (args.translatedBy !== undefined && args.translatedBy !== null) {
      this.translatedBy = args.translatedBy;
    }
    if (args.translatedTime !== undefined && args.translatedTime !== null) {
      this.translatedTime = args.translatedTime;
    }
  }
};
Translation.prototype = {};
Translation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sentUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tolangid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.transUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.translatedBy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.translatedTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Translation.prototype.write = function(output) {
  output.writeStructBegin('Translation');
  if (this.sentUri !== null && this.sentUri !== undefined) {
    output.writeFieldBegin('sentUri', Thrift.Type.STRING, 1);
    output.writeString(this.sentUri);
    output.writeFieldEnd();
  }
  if (this.tolangid !== null && this.tolangid !== undefined) {
    output.writeFieldBegin('tolangid', Thrift.Type.STRING, 2);
    output.writeString(this.tolangid);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 3);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.transUri !== null && this.transUri !== undefined) {
    output.writeFieldBegin('transUri', Thrift.Type.STRING, 4);
    output.writeString(this.transUri);
    output.writeFieldEnd();
  }
  if (this.translatedBy !== null && this.translatedBy !== undefined) {
    output.writeFieldBegin('translatedBy', Thrift.Type.STRING, 5);
    output.writeString(this.translatedBy);
    output.writeFieldEnd();
  }
  if (this.translatedTime !== null && this.translatedTime !== undefined) {
    output.writeFieldBegin('translatedTime', Thrift.Type.I64, 6);
    output.writeI64(this.translatedTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WordbookSummary = module.exports.WordbookSummary = function(args) {
  this.langid = null;
  this.title = null;
  this.wordbookUri = null;
  this.description = null;
  this.numWords = null;
  this.picUri = null;
  this.isClonedWordbook = null;
  if (args) {
    if (args.langid !== undefined && args.langid !== null) {
      this.langid = args.langid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field langid is unset!');
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field title is unset!');
    }
    if (args.wordbookUri !== undefined && args.wordbookUri !== null) {
      this.wordbookUri = args.wordbookUri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field wordbookUri is unset!');
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.numWords !== undefined && args.numWords !== null) {
      this.numWords = args.numWords;
    }
    if (args.picUri !== undefined && args.picUri !== null) {
      this.picUri = args.picUri;
    }
    if (args.isClonedWordbook !== undefined && args.isClonedWordbook !== null) {
      this.isClonedWordbook = args.isClonedWordbook;
    }
  }
};
WordbookSummary.prototype = {};
WordbookSummary.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.langid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.wordbookUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.numWords = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.picUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.isClonedWordbook = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WordbookSummary.prototype.write = function(output) {
  output.writeStructBegin('WordbookSummary');
  if (this.langid !== null && this.langid !== undefined) {
    output.writeFieldBegin('langid', Thrift.Type.STRING, 1);
    output.writeString(this.langid);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.wordbookUri !== null && this.wordbookUri !== undefined) {
    output.writeFieldBegin('wordbookUri', Thrift.Type.STRING, 3);
    output.writeString(this.wordbookUri);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 4);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.numWords !== null && this.numWords !== undefined) {
    output.writeFieldBegin('numWords', Thrift.Type.I32, 5);
    output.writeI32(this.numWords);
    output.writeFieldEnd();
  }
  if (this.picUri !== null && this.picUri !== undefined) {
    output.writeFieldBegin('picUri', Thrift.Type.STRING, 7);
    output.writeString(this.picUri);
    output.writeFieldEnd();
  }
  if (this.isClonedWordbook !== null && this.isClonedWordbook !== undefined) {
    output.writeFieldBegin('isClonedWordbook', Thrift.Type.BOOL, 8);
    output.writeBool(this.isClonedWordbook);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Wordbook = module.exports.Wordbook = function(args) {
  this.langid = null;
  this.title = null;
  this.words = null;
  this.wordbookUri = null;
  this.description = null;
  this.coverPicUri = null;
  this.USN = null;
  this.numWords = null;
  this.modifiedTime = null;
  if (args) {
    if (args.langid !== undefined && args.langid !== null) {
      this.langid = args.langid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field langid is unset!');
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field title is unset!');
    }
    if (args.words !== undefined && args.words !== null) {
      this.words = Thrift.copyList(args.words, [null]);
    }
    if (args.wordbookUri !== undefined && args.wordbookUri !== null) {
      this.wordbookUri = args.wordbookUri;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.coverPicUri !== undefined && args.coverPicUri !== null) {
      this.coverPicUri = args.coverPicUri;
    }
    if (args.USN !== undefined && args.USN !== null) {
      this.USN = args.USN;
    }
    if (args.numWords !== undefined && args.numWords !== null) {
      this.numWords = args.numWords;
    }
    if (args.modifiedTime !== undefined && args.modifiedTime !== null) {
      this.modifiedTime = args.modifiedTime;
    }
  }
};
Wordbook.prototype = {};
Wordbook.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.langid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size50 = 0;
        var _rtmp354;
        this.words = [];
        var _etype53 = 0;
        _rtmp354 = input.readSetBegin();
        _etype53 = _rtmp354.etype;
        _size50 = _rtmp354.size;
        for (var _i55 = 0; _i55 < _size50; ++_i55)
        {
          var elem56 = null;
          elem56 = input.readString();
          this.words.push(elem56);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.wordbookUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.coverPicUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.USN = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.numWords = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.modifiedTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Wordbook.prototype.write = function(output) {
  output.writeStructBegin('Wordbook');
  if (this.langid !== null && this.langid !== undefined) {
    output.writeFieldBegin('langid', Thrift.Type.STRING, 1);
    output.writeString(this.langid);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.words !== null && this.words !== undefined) {
    output.writeFieldBegin('words', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRING, this.words.length);
    for (var iter57 in this.words)
    {
      if (this.words.hasOwnProperty(iter57))
      {
        iter57 = this.words[iter57];
        output.writeString(iter57);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.wordbookUri !== null && this.wordbookUri !== undefined) {
    output.writeFieldBegin('wordbookUri', Thrift.Type.STRING, 4);
    output.writeString(this.wordbookUri);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 5);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.coverPicUri !== null && this.coverPicUri !== undefined) {
    output.writeFieldBegin('coverPicUri', Thrift.Type.STRING, 6);
    output.writeString(this.coverPicUri);
    output.writeFieldEnd();
  }
  if (this.USN !== null && this.USN !== undefined) {
    output.writeFieldBegin('USN', Thrift.Type.I64, 7);
    output.writeI64(this.USN);
    output.writeFieldEnd();
  }
  if (this.numWords !== null && this.numWords !== undefined) {
    output.writeFieldBegin('numWords', Thrift.Type.I32, 8);
    output.writeI32(this.numWords);
    output.writeFieldEnd();
  }
  if (this.modifiedTime !== null && this.modifiedTime !== undefined) {
    output.writeFieldBegin('modifiedTime', Thrift.Type.I64, 9);
    output.writeI64(this.modifiedTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LearningRecord = module.exports.LearningRecord = function(args) {
  this.word = null;
  this.langid = null;
  this.timeToLookupActivities = null;
  this.timeToTestScores = null;
  if (args) {
    if (args.word !== undefined && args.word !== null) {
      this.word = args.word;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field word is unset!');
    }
    if (args.langid !== undefined && args.langid !== null) {
      this.langid = args.langid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field langid is unset!');
    }
    if (args.timeToLookupActivities !== undefined && args.timeToLookupActivities !== null) {
      this.timeToLookupActivities = Thrift.copyMap(args.timeToLookupActivities, [null]);
    }
    if (args.timeToTestScores !== undefined && args.timeToTestScores !== null) {
      this.timeToTestScores = Thrift.copyMap(args.timeToTestScores, [null]);
    }
  }
};
LearningRecord.prototype = {};
LearningRecord.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.word = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.langid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size58 = 0;
        var _rtmp362;
        this.timeToLookupActivities = {};
        var _ktype59 = 0;
        var _vtype60 = 0;
        _rtmp362 = input.readMapBegin();
        _ktype59 = _rtmp362.ktype;
        _vtype60 = _rtmp362.vtype;
        _size58 = _rtmp362.size;
        for (var _i63 = 0; _i63 < _size58; ++_i63)
        {
          var key64 = null;
          var val65 = null;
          key64 = input.readI64();
          val65 = input.readI32();
          this.timeToLookupActivities[key64] = val65;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size66 = 0;
        var _rtmp370;
        this.timeToTestScores = {};
        var _ktype67 = 0;
        var _vtype68 = 0;
        _rtmp370 = input.readMapBegin();
        _ktype67 = _rtmp370.ktype;
        _vtype68 = _rtmp370.vtype;
        _size66 = _rtmp370.size;
        for (var _i71 = 0; _i71 < _size66; ++_i71)
        {
          var key72 = null;
          var val73 = null;
          key72 = input.readI64();
          val73 = input.readI32();
          this.timeToTestScores[key72] = val73;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LearningRecord.prototype.write = function(output) {
  output.writeStructBegin('LearningRecord');
  if (this.word !== null && this.word !== undefined) {
    output.writeFieldBegin('word', Thrift.Type.STRING, 1);
    output.writeString(this.word);
    output.writeFieldEnd();
  }
  if (this.langid !== null && this.langid !== undefined) {
    output.writeFieldBegin('langid', Thrift.Type.STRING, 2);
    output.writeString(this.langid);
    output.writeFieldEnd();
  }
  if (this.timeToLookupActivities !== null && this.timeToLookupActivities !== undefined) {
    output.writeFieldBegin('timeToLookupActivities', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.I32, Thrift.objectLength(this.timeToLookupActivities));
    for (var kiter74 in this.timeToLookupActivities)
    {
      if (this.timeToLookupActivities.hasOwnProperty(kiter74))
      {
        var viter75 = this.timeToLookupActivities[kiter74];
        output.writeI64(kiter74);
        output.writeI32(viter75);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.timeToTestScores !== null && this.timeToTestScores !== undefined) {
    output.writeFieldBegin('timeToTestScores', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.I32, Thrift.objectLength(this.timeToTestScores));
    for (var kiter76 in this.timeToTestScores)
    {
      if (this.timeToTestScores.hasOwnProperty(kiter76))
      {
        var viter77 = this.timeToTestScores[kiter76];
        output.writeI64(kiter76);
        output.writeI32(viter77);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MaterialSummary = module.exports.MaterialSummary = function(args) {
  this.materialUri = null;
  this.title = null;
  this.summary = null;
  this.numLikes = null;
  this.numComments = null;
  this.materialType = null;
  this.picUri = null;
  this.audioUri = null;
  this.videoUri = null;
  this.highlights = null;
  this.author = null;
  this.authorProfilePicUri = null;
  this.userLiked = null;
  this.langid = null;
  this.vialangid = null;
  if (args) {
    if (args.materialUri !== undefined && args.materialUri !== null) {
      this.materialUri = args.materialUri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field materialUri is unset!');
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field title is unset!');
    }
    if (args.summary !== undefined && args.summary !== null) {
      this.summary = args.summary;
    }
    if (args.numLikes !== undefined && args.numLikes !== null) {
      this.numLikes = args.numLikes;
    }
    if (args.numComments !== undefined && args.numComments !== null) {
      this.numComments = args.numComments;
    }
    if (args.materialType !== undefined && args.materialType !== null) {
      this.materialType = args.materialType;
    }
    if (args.picUri !== undefined && args.picUri !== null) {
      this.picUri = args.picUri;
    }
    if (args.audioUri !== undefined && args.audioUri !== null) {
      this.audioUri = args.audioUri;
    }
    if (args.videoUri !== undefined && args.videoUri !== null) {
      this.videoUri = args.videoUri;
    }
    if (args.highlights !== undefined && args.highlights !== null) {
      this.highlights = Thrift.copyList(args.highlights, [null]);
    }
    if (args.author !== undefined && args.author !== null) {
      this.author = args.author;
    }
    if (args.authorProfilePicUri !== undefined && args.authorProfilePicUri !== null) {
      this.authorProfilePicUri = args.authorProfilePicUri;
    }
    if (args.userLiked !== undefined && args.userLiked !== null) {
      this.userLiked = args.userLiked;
    }
    if (args.langid !== undefined && args.langid !== null) {
      this.langid = args.langid;
    }
    if (args.vialangid !== undefined && args.vialangid !== null) {
      this.vialangid = args.vialangid;
    }
  }
};
MaterialSummary.prototype = {};
MaterialSummary.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.materialUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.summary = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.numLikes = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.numComments = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.materialType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.picUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.audioUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.videoUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size78 = 0;
        var _rtmp382;
        this.highlights = [];
        var _etype81 = 0;
        _rtmp382 = input.readListBegin();
        _etype81 = _rtmp382.etype;
        _size78 = _rtmp382.size;
        for (var _i83 = 0; _i83 < _size78; ++_i83)
        {
          var elem84 = null;
          elem84 = input.readString();
          this.highlights.push(elem84);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.author = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.authorProfilePicUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.userLiked = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.langid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.vialangid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MaterialSummary.prototype.write = function(output) {
  output.writeStructBegin('MaterialSummary');
  if (this.materialUri !== null && this.materialUri !== undefined) {
    output.writeFieldBegin('materialUri', Thrift.Type.STRING, 1);
    output.writeString(this.materialUri);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.summary !== null && this.summary !== undefined) {
    output.writeFieldBegin('summary', Thrift.Type.STRING, 3);
    output.writeString(this.summary);
    output.writeFieldEnd();
  }
  if (this.numLikes !== null && this.numLikes !== undefined) {
    output.writeFieldBegin('numLikes', Thrift.Type.I32, 4);
    output.writeI32(this.numLikes);
    output.writeFieldEnd();
  }
  if (this.numComments !== null && this.numComments !== undefined) {
    output.writeFieldBegin('numComments', Thrift.Type.I32, 5);
    output.writeI32(this.numComments);
    output.writeFieldEnd();
  }
  if (this.materialType !== null && this.materialType !== undefined) {
    output.writeFieldBegin('materialType', Thrift.Type.I32, 6);
    output.writeI32(this.materialType);
    output.writeFieldEnd();
  }
  if (this.picUri !== null && this.picUri !== undefined) {
    output.writeFieldBegin('picUri', Thrift.Type.STRING, 7);
    output.writeString(this.picUri);
    output.writeFieldEnd();
  }
  if (this.audioUri !== null && this.audioUri !== undefined) {
    output.writeFieldBegin('audioUri', Thrift.Type.STRING, 8);
    output.writeString(this.audioUri);
    output.writeFieldEnd();
  }
  if (this.videoUri !== null && this.videoUri !== undefined) {
    output.writeFieldBegin('videoUri', Thrift.Type.STRING, 9);
    output.writeString(this.videoUri);
    output.writeFieldEnd();
  }
  if (this.highlights !== null && this.highlights !== undefined) {
    output.writeFieldBegin('highlights', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRING, this.highlights.length);
    for (var iter85 in this.highlights)
    {
      if (this.highlights.hasOwnProperty(iter85))
      {
        iter85 = this.highlights[iter85];
        output.writeString(iter85);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.author !== null && this.author !== undefined) {
    output.writeFieldBegin('author', Thrift.Type.STRING, 11);
    output.writeString(this.author);
    output.writeFieldEnd();
  }
  if (this.authorProfilePicUri !== null && this.authorProfilePicUri !== undefined) {
    output.writeFieldBegin('authorProfilePicUri', Thrift.Type.STRING, 12);
    output.writeString(this.authorProfilePicUri);
    output.writeFieldEnd();
  }
  if (this.userLiked !== null && this.userLiked !== undefined) {
    output.writeFieldBegin('userLiked', Thrift.Type.BOOL, 13);
    output.writeBool(this.userLiked);
    output.writeFieldEnd();
  }
  if (this.langid !== null && this.langid !== undefined) {
    output.writeFieldBegin('langid', Thrift.Type.STRING, 14);
    output.writeString(this.langid);
    output.writeFieldEnd();
  }
  if (this.vialangid !== null && this.vialangid !== undefined) {
    output.writeFieldBegin('vialangid', Thrift.Type.STRING, 15);
    output.writeString(this.vialangid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Material = module.exports.Material = function(args) {
  this.langid = null;
  this.vialangid = null;
  this.title = null;
  this.content = null;
  this.creator = null;
  this.materialUri = null;
  this.materialType = null;
  this.creatorSetLevel = null;
  this.summary = null;
  this.source = null;
  this.audioUri = null;
  this.picUri = null;
  this.videoUri = null;
  this.USN = null;
  this.modifiedTime = null;
  if (args) {
    if (args.langid !== undefined && args.langid !== null) {
      this.langid = args.langid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field langid is unset!');
    }
    if (args.vialangid !== undefined && args.vialangid !== null) {
      this.vialangid = args.vialangid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field vialangid is unset!');
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field title is unset!');
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = args.content;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field content is unset!');
    }
    if (args.creator !== undefined && args.creator !== null) {
      this.creator = args.creator;
    }
    if (args.materialUri !== undefined && args.materialUri !== null) {
      this.materialUri = args.materialUri;
    }
    if (args.materialType !== undefined && args.materialType !== null) {
      this.materialType = args.materialType;
    }
    if (args.creatorSetLevel !== undefined && args.creatorSetLevel !== null) {
      this.creatorSetLevel = args.creatorSetLevel;
    }
    if (args.summary !== undefined && args.summary !== null) {
      this.summary = args.summary;
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.audioUri !== undefined && args.audioUri !== null) {
      this.audioUri = args.audioUri;
    }
    if (args.picUri !== undefined && args.picUri !== null) {
      this.picUri = args.picUri;
    }
    if (args.videoUri !== undefined && args.videoUri !== null) {
      this.videoUri = args.videoUri;
    }
    if (args.USN !== undefined && args.USN !== null) {
      this.USN = args.USN;
    }
    if (args.modifiedTime !== undefined && args.modifiedTime !== null) {
      this.modifiedTime = args.modifiedTime;
    }
  }
};
Material.prototype = {};
Material.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.langid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.vialangid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.creator = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.materialUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.materialType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.creatorSetLevel = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.summary = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.audioUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.picUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.videoUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.USN = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.modifiedTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Material.prototype.write = function(output) {
  output.writeStructBegin('Material');
  if (this.langid !== null && this.langid !== undefined) {
    output.writeFieldBegin('langid', Thrift.Type.STRING, 1);
    output.writeString(this.langid);
    output.writeFieldEnd();
  }
  if (this.vialangid !== null && this.vialangid !== undefined) {
    output.writeFieldBegin('vialangid', Thrift.Type.STRING, 2);
    output.writeString(this.vialangid);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 3);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 4);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.STRING, 5);
    output.writeString(this.creator);
    output.writeFieldEnd();
  }
  if (this.materialUri !== null && this.materialUri !== undefined) {
    output.writeFieldBegin('materialUri', Thrift.Type.STRING, 6);
    output.writeString(this.materialUri);
    output.writeFieldEnd();
  }
  if (this.materialType !== null && this.materialType !== undefined) {
    output.writeFieldBegin('materialType', Thrift.Type.I32, 7);
    output.writeI32(this.materialType);
    output.writeFieldEnd();
  }
  if (this.creatorSetLevel !== null && this.creatorSetLevel !== undefined) {
    output.writeFieldBegin('creatorSetLevel', Thrift.Type.I32, 8);
    output.writeI32(this.creatorSetLevel);
    output.writeFieldEnd();
  }
  if (this.summary !== null && this.summary !== undefined) {
    output.writeFieldBegin('summary', Thrift.Type.STRING, 9);
    output.writeString(this.summary);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 10);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.audioUri !== null && this.audioUri !== undefined) {
    output.writeFieldBegin('audioUri', Thrift.Type.STRING, 11);
    output.writeString(this.audioUri);
    output.writeFieldEnd();
  }
  if (this.picUri !== null && this.picUri !== undefined) {
    output.writeFieldBegin('picUri', Thrift.Type.STRING, 12);
    output.writeString(this.picUri);
    output.writeFieldEnd();
  }
  if (this.videoUri !== null && this.videoUri !== undefined) {
    output.writeFieldBegin('videoUri', Thrift.Type.STRING, 13);
    output.writeString(this.videoUri);
    output.writeFieldEnd();
  }
  if (this.USN !== null && this.USN !== undefined) {
    output.writeFieldBegin('USN', Thrift.Type.I64, 14);
    output.writeI64(this.USN);
    output.writeFieldEnd();
  }
  if (this.modifiedTime !== null && this.modifiedTime !== undefined) {
    output.writeFieldBegin('modifiedTime', Thrift.Type.I64, 15);
    output.writeI64(this.modifiedTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MaterialAnnot = module.exports.MaterialAnnot = function(args) {
  this.materialUri = null;
  this.materialModifiedTime = null;
  this.contentDigest = null;
  this.paraLangs = null;
  this.langidToContentWords = null;
  if (args) {
    if (args.materialUri !== undefined && args.materialUri !== null) {
      this.materialUri = args.materialUri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field materialUri is unset!');
    }
    if (args.materialModifiedTime !== undefined && args.materialModifiedTime !== null) {
      this.materialModifiedTime = args.materialModifiedTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field materialModifiedTime is unset!');
    }
    if (args.contentDigest !== undefined && args.contentDigest !== null) {
      this.contentDigest = args.contentDigest;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contentDigest is unset!');
    }
    if (args.paraLangs !== undefined && args.paraLangs !== null) {
      this.paraLangs = new annot_ttypes.AnnotationSequence(args.paraLangs);
    }
    if (args.langidToContentWords !== undefined && args.langidToContentWords !== null) {
      this.langidToContentWords = Thrift.copyMap(args.langidToContentWords, [annot_ttypes.AnnotationSequence]);
    }
  }
};
MaterialAnnot.prototype = {};
MaterialAnnot.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.materialUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.materialModifiedTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.contentDigest = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.paraLangs = new annot_ttypes.AnnotationSequence();
        this.paraLangs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size86 = 0;
        var _rtmp390;
        this.langidToContentWords = {};
        var _ktype87 = 0;
        var _vtype88 = 0;
        _rtmp390 = input.readMapBegin();
        _ktype87 = _rtmp390.ktype;
        _vtype88 = _rtmp390.vtype;
        _size86 = _rtmp390.size;
        for (var _i91 = 0; _i91 < _size86; ++_i91)
        {
          var key92 = null;
          var val93 = null;
          key92 = input.readString();
          val93 = new annot_ttypes.AnnotationSequence();
          val93.read(input);
          this.langidToContentWords[key92] = val93;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MaterialAnnot.prototype.write = function(output) {
  output.writeStructBegin('MaterialAnnot');
  if (this.materialUri !== null && this.materialUri !== undefined) {
    output.writeFieldBegin('materialUri', Thrift.Type.STRING, 1);
    output.writeString(this.materialUri);
    output.writeFieldEnd();
  }
  if (this.materialModifiedTime !== null && this.materialModifiedTime !== undefined) {
    output.writeFieldBegin('materialModifiedTime', Thrift.Type.I64, 2);
    output.writeI64(this.materialModifiedTime);
    output.writeFieldEnd();
  }
  if (this.contentDigest !== null && this.contentDigest !== undefined) {
    output.writeFieldBegin('contentDigest', Thrift.Type.STRING, 3);
    output.writeString(this.contentDigest);
    output.writeFieldEnd();
  }
  if (this.paraLangs !== null && this.paraLangs !== undefined) {
    output.writeFieldBegin('paraLangs', Thrift.Type.STRUCT, 4);
    this.paraLangs.write(output);
    output.writeFieldEnd();
  }
  if (this.langidToContentWords !== null && this.langidToContentWords !== undefined) {
    output.writeFieldBegin('langidToContentWords', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.langidToContentWords));
    for (var kiter94 in this.langidToContentWords)
    {
      if (this.langidToContentWords.hasOwnProperty(kiter94))
      {
        var viter95 = this.langidToContentWords[kiter94];
        output.writeString(kiter94);
        viter95.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ReadingRecord = module.exports.ReadingRecord = function(args) {
  this.readTime = null;
  this.resourceUri = null;
  this.startOffset = -1;
  this.endOffset = -1;
  this.lookupWords = null;
  this.username = null;
  if (args) {
    if (args.readTime !== undefined && args.readTime !== null) {
      this.readTime = args.readTime;
    }
    if (args.resourceUri !== undefined && args.resourceUri !== null) {
      this.resourceUri = args.resourceUri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field resourceUri is unset!');
    }
    if (args.startOffset !== undefined && args.startOffset !== null) {
      this.startOffset = args.startOffset;
    }
    if (args.endOffset !== undefined && args.endOffset !== null) {
      this.endOffset = args.endOffset;
    }
    if (args.lookupWords !== undefined && args.lookupWords !== null) {
      this.lookupWords = Thrift.copyList(args.lookupWords, [null]);
    }
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
  }
};
ReadingRecord.prototype = {};
ReadingRecord.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.readTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.resourceUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.startOffset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.endOffset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.lookupWords = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = input.readString();
          this.lookupWords.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReadingRecord.prototype.write = function(output) {
  output.writeStructBegin('ReadingRecord');
  if (this.readTime !== null && this.readTime !== undefined) {
    output.writeFieldBegin('readTime', Thrift.Type.I64, 1);
    output.writeI64(this.readTime);
    output.writeFieldEnd();
  }
  if (this.resourceUri !== null && this.resourceUri !== undefined) {
    output.writeFieldBegin('resourceUri', Thrift.Type.STRING, 2);
    output.writeString(this.resourceUri);
    output.writeFieldEnd();
  }
  if (this.startOffset !== null && this.startOffset !== undefined) {
    output.writeFieldBegin('startOffset', Thrift.Type.I32, 3);
    output.writeI32(this.startOffset);
    output.writeFieldEnd();
  }
  if (this.endOffset !== null && this.endOffset !== undefined) {
    output.writeFieldBegin('endOffset', Thrift.Type.I32, 4);
    output.writeI32(this.endOffset);
    output.writeFieldEnd();
  }
  if (this.lookupWords !== null && this.lookupWords !== undefined) {
    output.writeFieldBegin('lookupWords', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.lookupWords.length);
    for (var iter103 in this.lookupWords)
    {
      if (this.lookupWords.hasOwnProperty(iter103))
      {
        iter103 = this.lookupWords[iter103];
        output.writeString(iter103);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 6);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

