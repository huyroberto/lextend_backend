//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
var Profile = module.exports.Profile = function(args) {
  this.username = null;
  this.password = null;
  this.email = null;
  this.birthTime = null;
  this.motherTongue = null;
  this.avatarUri = null;
  this.fullName = null;
  if (args) {
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field username is unset!');
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field email is unset!');
    }
    if (args.birthTime !== undefined && args.birthTime !== null) {
      this.birthTime = args.birthTime;
    }
    if (args.motherTongue !== undefined && args.motherTongue !== null) {
      this.motherTongue = args.motherTongue;
    }
    if (args.avatarUri !== undefined && args.avatarUri !== null) {
      this.avatarUri = args.avatarUri;
    }
    if (args.fullName !== undefined && args.fullName !== null) {
      this.fullName = args.fullName;
    }
  }
};
Profile.prototype = {};
Profile.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.birthTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.motherTongue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.avatarUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.fullName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Profile.prototype.write = function(output) {
  output.writeStructBegin('Profile');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 3);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.birthTime !== null && this.birthTime !== undefined) {
    output.writeFieldBegin('birthTime', Thrift.Type.I64, 4);
    output.writeI64(this.birthTime);
    output.writeFieldEnd();
  }
  if (this.motherTongue !== null && this.motherTongue !== undefined) {
    output.writeFieldBegin('motherTongue', Thrift.Type.STRING, 5);
    output.writeString(this.motherTongue);
    output.writeFieldEnd();
  }
  if (this.avatarUri !== null && this.avatarUri !== undefined) {
    output.writeFieldBegin('avatarUri', Thrift.Type.STRING, 6);
    output.writeString(this.avatarUri);
    output.writeFieldEnd();
  }
  if (this.fullName !== null && this.fullName !== undefined) {
    output.writeFieldBegin('fullName', Thrift.Type.STRING, 7);
    output.writeString(this.fullName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Token = module.exports.Token = function(args) {
  this.username = null;
  this.tokenstr = null;
  this.expire = null;
  this.installationId = null;
  this.loginTime = null;
  if (args) {
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field username is unset!');
    }
    if (args.tokenstr !== undefined && args.tokenstr !== null) {
      this.tokenstr = args.tokenstr;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tokenstr is unset!');
    }
    if (args.expire !== undefined && args.expire !== null) {
      this.expire = args.expire;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field expire is unset!');
    }
    if (args.installationId !== undefined && args.installationId !== null) {
      this.installationId = args.installationId;
    }
    if (args.loginTime !== undefined && args.loginTime !== null) {
      this.loginTime = args.loginTime;
    }
  }
};
Token.prototype = {};
Token.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tokenstr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.expire = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.installationId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.loginTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Token.prototype.write = function(output) {
  output.writeStructBegin('Token');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.tokenstr !== null && this.tokenstr !== undefined) {
    output.writeFieldBegin('tokenstr', Thrift.Type.STRING, 2);
    output.writeString(this.tokenstr);
    output.writeFieldEnd();
  }
  if (this.expire !== null && this.expire !== undefined) {
    output.writeFieldBegin('expire', Thrift.Type.I64, 3);
    output.writeI64(this.expire);
    output.writeFieldEnd();
  }
  if (this.installationId !== null && this.installationId !== undefined) {
    output.writeFieldBegin('installationId', Thrift.Type.STRING, 4);
    output.writeString(this.installationId);
    output.writeFieldEnd();
  }
  if (this.loginTime !== null && this.loginTime !== undefined) {
    output.writeFieldBegin('loginTime', Thrift.Type.I64, 5);
    output.writeI64(this.loginTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Credential = module.exports.Credential = function(args) {
  this.username = null;
  this.password = null;
  this.installationId = null;
  if (args) {
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field username is unset!');
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field password is unset!');
    }
    if (args.installationId !== undefined && args.installationId !== null) {
      this.installationId = args.installationId;
    }
  }
};
Credential.prototype = {};
Credential.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.installationId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Credential.prototype.write = function(output) {
  output.writeStructBegin('Credential');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.installationId !== null && this.installationId !== undefined) {
    output.writeFieldBegin('installationId', Thrift.Type.STRING, 3);
    output.writeString(this.installationId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

